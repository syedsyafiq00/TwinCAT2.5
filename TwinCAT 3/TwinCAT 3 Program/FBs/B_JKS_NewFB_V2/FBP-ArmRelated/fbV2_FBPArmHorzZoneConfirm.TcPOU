<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fbV2_FBPArmHorzZoneConfirm" Id="{8135495d-a4fb-400c-b1b3-39f72bf85f0f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbV2_FBPArmHorzZoneConfirm
VAR_INPUT
	bEnable 					: BOOL;
(*	ARiLdStnID					: INT;
	ARiUldStnID					: INT;
*)	lrHorzActualPos 			: LREAL;
	lrHorzStartPoint 			: LREAL;
	lrHorzEndPoint 			: LREAL;
	ARlrLdHorzCentrePoint 	: ARRAY [0..iLdStnQty] OF LREAL;
	ARlrStnHorzCentrePoint 	: ARRAY [0..iStnQty] OF LREAL;
	ARlrUldHorzCentrePoint 	: ARRAY [0..iUldStnQty] OF LREAL;
	ARiStnHorzListing 		: ARRAY [1..50] OF INT;

END_VAR


VAR_OUTPUT
	ARbLdHorzZoneConfirm 		: ARRAY [0..iLdStnQty] OF BOOL;
	ARbHorzStnZoneConfirm 		: ARRAY [1..iStnQty] OF BOOL;
	ARbUldHorzZoneConfirm 		: ARRAY [0..iUldStnQty] OF BOOL;
	ICurrentHorzZoneNo 			: INT;
	bInvalidListingErr				: BOOL;

	ARbLdHorzZoneConfirmDisplay 		: ARRAY [0..iLdStnQty] OF BOOL;
	ARbHorzStnZoneConfirmDisplay 	: ARRAY [1..iStnQty] OF BOOL;
	ARbUldHorzZoneConfirmDisplay 	: ARRAY [0..iUldStnQty] OF BOOL;
	iCurrentHorzZoneNoDisplay 		: INT;

END_VAR
(*
VAR_IN_OUT
	iZoneEndPoint : ARRAY [1..20] OF INT;
	iActualPos: INT;

END_VAR
*)
VAR

	iActualPos: INT;


	bEnableRE: R_TRIG;
	iGenZoneFL: INT;
	ARlrZoneCentrePoint : ARRAY [1..50] OF LREAL;
	ARlrZoneEndPoint : ARRAY [1..50] OF LREAL;
	ARbZonePosConfirmInt : ARRAY [1..50] OF BOOL;
	iCheckListFL: INT;
	iEndPointFL: INT;
	bEnableFE: F_TRIG;
	iClearFL: INT;
	IZonePosCfFL: INT;
	iCurrentStnFL: INT;
	bCheckStnConfirm: BOOL;
	iCheckStnBitFL: INT;
	iGenZoneSFL: INT;
	bStnHorzListingFound: BOOL;
	bCurrentHorzZoneNoFound: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*bEnable Rising Edge*)
bEnableRE(CLK:=bEnable , Q=> );
bEnableFE(CLK:=bEnable , Q=> );


(*Generate Zone Centre Point and Transfer Confirm Bit*)
IF bEnable THEN
iGenZoneFL := 1;
	FOR iGenZoneFL := 1 TO 50 DO
		IF iGenZoneFL >= 1 AND iGenZoneFL <= 50 THEN

		bStnHorzListingFound := FALSE;

			iGenZoneSFL := 1;
				FOR iGenZoneSFL := 1 TO iLdStnQty DO
					IF iGenZoneSFL >= 1 AND iGenZoneSFL <= iLdStnQty THEN

						IF ARiStnHorzListing[iGenZoneFL] = ARiLdStnID[iGenZoneSFL] THEN
							ARlrZoneCentrePoint[iGenZoneFL] := ARlrLdHorzCentrePoint[iGenZoneSFL];
							ARbLdHorzZoneConfirm[iGenZoneSFL] := ARbZonePosConfirmInt[iGenZoneFL];
							bStnHorzListingFound := TRUE;
						END_IF

					END_IF
				END_FOR

			iGenZoneSFL := 1;
				FOR iGenZoneSFL := 1 TO iUldStnQty DO
					IF iGenZoneSFL >= 1 AND iGenZoneSFL <= iUldStnQty THEN

						IF ARiStnHorzListing[iGenZoneFL] = ARiUldStnID[iGenZoneSFL] THEN
							ARlrZoneCentrePoint[iGenZoneFL] := ARlrUldHorzCentrePoint[iGenZoneSFL];
							ARbUldHorzZoneConfirm[iGenZoneSFL] := ARbZonePosConfirmInt[iGenZoneFL];
							bStnHorzListingFound := TRUE;
						END_IF

					END_IF
				END_FOR


			IF NOT bStnHorzListingFound (*ARiStnHorzListing[iGenZoneFL] <> ARiUldStnID AND ARiStnHorzListing[iGenZoneFL] <> ARiUldStnID*) AND ARiStnHorzListing[iGenZoneFL] <> 0 AND ARiStnHorzListing[iGenZoneFL] <= iStnQty THEN
				ARlrZoneCentrePoint[iGenZoneFL] := ARlrStnHorzCentrePoint[ARiStnHorzListing[iGenZoneFL]];
				ARbHorzStnZoneConfirm[ARiStnHorzListing[iGenZoneFL]] := ARbZonePosConfirmInt[iGenZoneFL];
			END_IF


		END_IF
	END_FOR
END_IF


(*Check invalid Stn Listing*)
IF bEnableRE.Q THEN
bInvalidListingErr := FALSE;
iCheckListFL := 1;
	FOR iCheckListFL := 1 TO 50 DO
		IF iCheckListFL >= 1 AND iCheckListFL <= 50 THEN

			IF iCheckListFL = 1 AND ARlrZoneCentrePoint[1] <= 0 THEN
			bInvalidListingErr := TRUE;
			iCheckListFL := 50+1;
			END_IF

			IF iCheckListFL > 1 AND ARlrZoneCentrePoint[iCheckListFL] <= ARlrZoneCentrePoint[iCheckListFL-1] AND ARiStnHorzListing[iCheckListFL] >0 THEN
			bInvalidListingErr := TRUE;
			iCheckListFL := 50+1;
			END_IF
		END_IF
	END_FOR
END_IF




(*Generate End Point *)
IF bEnableRE.Q THEN
iEndPointFL := 1;
	FOR iEndPointFL := 1 TO 50 DO
		IF iEndPointFL >= 1 AND iEndPointFL <= 50-1 THEN

(*			IF iEndPointFL >1 THEN*)
				IF ((ARlrZoneCentrePoint[iEndPointFL+1] - ARlrZoneCentrePoint[iEndPointFL])/2) >0 THEN
				ARlrZoneEndPoint[iEndPointFL] := ((ARlrZoneCentrePoint[iEndPointFL+1] - ARlrZoneCentrePoint[iEndPointFL])/2)+ARlrZoneCentrePoint[iEndPointFL];
				ELSIF lrHorzEndPoint <= ARlrZoneCentrePoint[iEndPointFL] THEN
				ARlrZoneEndPoint[iEndPointFL] := ARlrZoneCentrePoint[iEndPointFL]+5000;
				iEndPointFL := 50+1;
				ELSIF lrHorzEndPoint > ARlrZoneCentrePoint[iEndPointFL] THEN
				ARlrZoneEndPoint[iEndPointFL] := lrHorzEndPoint+1;
				iEndPointFL := 50+1;
				END_IF
(*			END_IF*)
		END_IF
	END_FOR
END_IF


(*Clear Data*)
IF bEnableFE.Q THEN
iClearFL := 1;
	FOR iClearFL := 1 TO 50 DO
		IF iClearFL >= 1 AND iClearFL <= 50 THEN

			ARlrZoneCentrePoint[iClearFL] := 0;
			ARlrZoneEndPoint[iClearFL] := 0;
			ARbZonePosConfirmInt[iClearFL] := FALSE;

			IF iClearFL >= 1 AND iClearFL <= iStnQty THEN
			ARbHorzStnZoneConfirm[iClearFL] := FALSE;
			END_IF

			IF iClearFL >= 1 AND iClearFL <= iLdStnQty THEN
			ARbLdHorzZoneConfirm[iClearFL] := FALSE;
			END_IF

			IF iClearFL >= 1 AND iClearFL <= iUldStnQty THEN
			ARbUldHorzZoneConfirm[iClearFL] := FALSE;
			END_IF

		END_IF
	END_FOR



ICurrentHorzZoneNo := 0;
bInvalidListingErr := FALSE;
END_IF


(*Convert LREAL to INT*)


iActualPos := LREAL_TO_INT(lrHorzActualPos);




IF bEnable AND NOT bInvalidListingErr THEN


(*General Zone Pos Confirm Internal*)
IZonePosCfFL := 1;
	FOR IZonePosCfFL := 1 TO 50 DO
		IF IZonePosCfFL >= 1 AND IZonePosCfFL <= 50 THEN

			IF IZonePosCfFL = 1 THEN
				IF (iActualPos >= lrHorzStartPoint) AND (iActualPos < ARlrZoneEndPoint[IZonePosCfFL]) AND iActualPos >0 THEN
				ARbZonePosConfirmInt[IZonePosCfFL] := TRUE;
				ELSE
				ARbZonePosConfirmInt[IZonePosCfFL] := FALSE;
				END_IF
			END_IF

			IF IZonePosCfFL > 1 THEN
				IF (iActualPos >= ARlrZoneEndPoint[IZonePosCfFL-1]) AND (iActualPos < ARlrZoneEndPoint[IZonePosCfFL]) AND iActualPos >0 THEN
				ARbZonePosConfirmInt[IZonePosCfFL] := TRUE;
				ELSE
				ARbZonePosConfirmInt[IZonePosCfFL] := FALSE;
				END_IF
			END_IF
		END_IF
	END_FOR

(*Generate ICurrentHorzZoneNo *)
	bCurrentHorzZoneNoFound := FALSE;


		IF NOT bCurrentHorzZoneNoFound THEN

		iCurrentStnFL := 1;
			FOR iCurrentStnFL := 1 TO iLdStnQty DO
				IF iCurrentStnFL >= 1 AND iCurrentStnFL <= iLdStnQty THEN

					IF ARbLdHorzZoneConfirm[iCurrentStnFL] THEN
					ICurrentHorzZoneNo := ARiLdStnID[iCurrentStnFL];
					bCurrentHorzZoneNoFound := TRUE;
					END_IF

				END_IF
			END_FOR
		END_IF


		IF NOT bCurrentHorzZoneNoFound THEN

		iCurrentStnFL := 1;
			FOR iCurrentStnFL := 1 TO iUldStnQty DO
				IF iCurrentStnFL >= 1 AND iCurrentStnFL <= iUldStnQty THEN

					IF ARbUldHorzZoneConfirm[iCurrentStnFL] THEN
					ICurrentHorzZoneNo := ARiUldStnID[iCurrentStnFL];
					bCurrentHorzZoneNoFound := TRUE;
					END_IF

				END_IF
			END_FOR
		END_IF

		IF NOT bCurrentHorzZoneNoFound THEN

		iCurrentStnFL := 1;
			FOR iCurrentStnFL := 1 TO iStnQty DO
				IF iCurrentStnFL >= 1 AND iCurrentStnFL <= iStnQty THEN

					IF ARbHorzStnZoneConfirm[iCurrentStnFL] THEN
					ICurrentHorzZoneNo := iCurrentStnFL;
					bCurrentHorzZoneNoFound := TRUE;
					END_IF

				END_IF
			END_FOR
		END_IF
(*
(*Check if any Ld/Uld/Stn Pos Confirm Bit is on, else -> ICurrentHorzZoneNo := 0; *)
bCheckStnConfirm := FALSE;
iCheckStnBitFL := 1;

	FOR iCheckStnBitFL := 1 TO iStnQty DO
		IF iCheckStnBitFL >= 1 AND iCheckStnBitFL <= iStnQty THEN
			IF ARbHorzStnZoneConfirm[iCheckStnBitFL] THEN
			bCheckStnConfirm := TRUE;
			END_IF
		END_IF
	END_FOR

*)
	IF NOT bCurrentHorzZoneNoFound(*ARbLdHorzZoneConfirm AND NOT ARbUldHorzZoneConfirm AND NOT bCheckStnConfirm*) THEN
	ICurrentHorzZoneNo := 0;
	END_IF

END_IF



(*Edit by Lee - Generate the Position Confirm Signal (Just Display) even though the Arm is no HOMING - 20180119*)
(*Generate Zone Centre Point and Transfer Confirm Bit*)
IF NOT bEnable THEN
iGenZoneFL := 1;
	FOR iGenZoneFL := 1 TO 50 DO
		IF iGenZoneFL >= 1 AND iGenZoneFL <= 50 THEN

		bStnHorzListingFound := FALSE;

			iGenZoneSFL := 1;
				FOR iGenZoneSFL := 1 TO iLdStnQty DO
					IF iGenZoneSFL >= 1 AND iGenZoneSFL <= iLdStnQty THEN

						IF ARiStnHorzListing[iGenZoneFL] = ARiLdStnID[iGenZoneSFL] THEN
							ARlrZoneCentrePoint[iGenZoneFL] := ARlrLdHorzCentrePoint[iGenZoneSFL];
							ARbLdHorzZoneConfirmDisplay[iGenZoneSFL] := ARbZonePosConfirmInt[iGenZoneFL];
							bStnHorzListingFound := TRUE;
						END_IF

					END_IF
				END_FOR

			iGenZoneSFL := 1;
				FOR iGenZoneSFL := 1 TO iUldStnQty DO
					IF iGenZoneSFL >= 1 AND iGenZoneSFL <= iUldStnQty THEN

						IF ARiStnHorzListing[iGenZoneFL] = ARiUldStnID[iGenZoneSFL] THEN
							ARlrZoneCentrePoint[iGenZoneFL] := ARlrUldHorzCentrePoint[iGenZoneSFL];
							ARbUldHorzZoneConfirmDisplay[iGenZoneSFL] := ARbZonePosConfirmInt[iGenZoneFL];
							bStnHorzListingFound := TRUE;
						END_IF

					END_IF
				END_FOR


			IF NOT bStnHorzListingFound (*ARiStnHorzListing[iGenZoneFL] <> ARiUldStnID AND ARiStnHorzListing[iGenZoneFL] <> ARiUldStnID*) AND ARiStnHorzListing[iGenZoneFL] <> 0 AND ARiStnHorzListing[iGenZoneFL] <= iStnQty THEN
				ARlrZoneCentrePoint[iGenZoneFL] := ARlrStnHorzCentrePoint[ARiStnHorzListing[iGenZoneFL]];
				ARbHorzStnZoneConfirmDisplay[ARiStnHorzListing[iGenZoneFL]] := ARbZonePosConfirmInt[iGenZoneFL];
			END_IF

		END_IF
	END_FOR
END_IF

(*Edit by Lee - Generate the Position Confirm Signal (Just Display) even though the Arm is no HOMING - 20180119*)
(*Generate End Point *)
IF NOT bEnable THEN
iEndPointFL := 1;
	FOR iEndPointFL := 1 TO 50 DO
		IF iEndPointFL >= 1 AND iEndPointFL <= 50-1 THEN

(*			IF iEndPointFL >1 THEN*)
				IF ((ARlrZoneCentrePoint[iEndPointFL+1] - ARlrZoneCentrePoint[iEndPointFL])/2) >0 THEN
				ARlrZoneEndPoint[iEndPointFL] := ((ARlrZoneCentrePoint[iEndPointFL+1] - ARlrZoneCentrePoint[iEndPointFL])/2)+ARlrZoneCentrePoint[iEndPointFL];
				ELSIF lrHorzEndPoint <= ARlrZoneCentrePoint[iEndPointFL] THEN
				ARlrZoneEndPoint[iEndPointFL] := ARlrZoneCentrePoint[iEndPointFL]+5000;
				iEndPointFL := 50+1;
				ELSIF lrHorzEndPoint > ARlrZoneCentrePoint[iEndPointFL] THEN
				ARlrZoneEndPoint[iEndPointFL] := lrHorzEndPoint+1;
				iEndPointFL := 50+1;
				END_IF
(*			END_IF*)
		END_IF
	END_FOR
END_IF


IF NOT bEnable AND NOT bInvalidListingErr THEN

(*Edit by Lee - Generate the Position Confirm Signal (Just Display) even though the Arm is no HOMING - 20180119*)
(*General Zone Pos Confirm Internal*)
IZonePosCfFL := 1;
	FOR IZonePosCfFL := 1 TO 50 DO
		IF IZonePosCfFL >= 1 AND IZonePosCfFL <= 50 THEN

			IF IZonePosCfFL = 1 THEN
				IF (iActualPos >= lrHorzStartPoint) AND (iActualPos < ARlrZoneEndPoint[IZonePosCfFL]) AND iActualPos >0 THEN
				ARbZonePosConfirmInt[IZonePosCfFL] := TRUE;
				ELSE
				ARbZonePosConfirmInt[IZonePosCfFL] := FALSE;
				END_IF
			END_IF

			IF IZonePosCfFL > 1 THEN
				IF (iActualPos >= ARlrZoneEndPoint[IZonePosCfFL-1]) AND (iActualPos < ARlrZoneEndPoint[IZonePosCfFL]) AND iActualPos >0 THEN
				ARbZonePosConfirmInt[IZonePosCfFL] := TRUE;
				ELSE
				ARbZonePosConfirmInt[IZonePosCfFL] := FALSE;
				END_IF
			END_IF
		END_IF
	END_FOR

(*Edit by Lee - Generate the Position Confirm Signal (Just Display) even though the Arm is no HOMING - 20180119*)
(*Generate ICurrentHorzZoneNo *)
	bCurrentHorzZoneNoFound := FALSE;


		IF NOT bCurrentHorzZoneNoFound THEN

		iCurrentStnFL := 1;
			FOR iCurrentStnFL := 1 TO iLdStnQty DO
				IF iCurrentStnFL >= 1 AND iCurrentStnFL <= iLdStnQty THEN

					IF ARbLdHorzZoneConfirmDisplay[iCurrentStnFL] THEN
					iCurrentHorzZoneNoDisplay := ARiLdStnID[iCurrentStnFL];
					bCurrentHorzZoneNoFound := TRUE;
					END_IF

				END_IF
			END_FOR
		END_IF


		IF NOT bCurrentHorzZoneNoFound THEN

		iCurrentStnFL := 1;
			FOR iCurrentStnFL := 1 TO iUldStnQty DO
				IF iCurrentStnFL >= 1 AND iCurrentStnFL <= iUldStnQty THEN

					IF ARbUldHorzZoneConfirmDisplay[iCurrentStnFL] THEN
					iCurrentHorzZoneNoDisplay := ARiUldStnID[iCurrentStnFL];
					bCurrentHorzZoneNoFound := TRUE;
					END_IF

				END_IF
			END_FOR
		END_IF

		IF NOT bCurrentHorzZoneNoFound THEN

		iCurrentStnFL := 1;
			FOR iCurrentStnFL := 1 TO iStnQty DO
				IF iCurrentStnFL >= 1 AND iCurrentStnFL <= iStnQty THEN

					IF ARbHorzStnZoneConfirmDisplay[iCurrentStnFL] THEN
					iCurrentHorzZoneNoDisplay := iCurrentStnFL;
					bCurrentHorzZoneNoFound := TRUE;
					END_IF

				END_IF
			END_FOR
		END_IF

	IF NOT bCurrentHorzZoneNoFound THEN
	iCurrentHorzZoneNoDisplay := 0;
	END_IF

END_IF]]></ST>
    </Implementation>
    <LineIds Name="fbV2_FBPArmHorzZoneConfirm">
      <LineId Id="58" Count="382" />
    </LineIds>
  </POU>
</TcPlcObject>