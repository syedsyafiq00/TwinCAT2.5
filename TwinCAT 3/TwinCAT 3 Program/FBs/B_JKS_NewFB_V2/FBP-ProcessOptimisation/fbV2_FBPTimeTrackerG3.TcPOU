<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fbV2_FBPTimeTrackerG3" Id="{d42d026e-13f0-46d0-b0bb-e0dacaabe2ef}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbV2_FBPTimeTrackerG3
(*************************************************************** Ver.B2 - Add Min/Max Time Recording in Memory - 160703 **************************************************************]

 	- ADD ARDsSSERSourceMinMaxTime_Uni TO collect MIN/MAX setting from MainStationProcess																		
	- After TIME Tracking -> Push StepNo / MIN / MAX / BusyLinkGroupMasterNo / BusyLinkGroupSlaveNo into RTB ARRAY.									
	- After TIME Tracking -> Push BusyTime  into RTB ARRAY.									
	- Change Array"9" method, Need to cover more data set. Refer below for more detail.
	- Found Array "5", when the block is 0", the value of Busy Time is "1". SOLVED.
	- Add MinMax Time Called during Tracker Mode
	- Found problem on RTB Call, if previous RTB called having more block than the new call Recipe, the new call recipe will have remaining block from previous call recipe. this will caused ERROR. SOLVED by Clear RTB before call..
	- Found Tracker problem, During first call arm, sime time it earlier than Call Arm Time and Some time it slower than call arm time. 


[****************************************************************************************************************************************************************************************************)

VAR_INPUT
	bScanningEN 										: BOOL;
	ARbReset 											: ARRAY [0..iProductRecipeArrayQty] OF BOOL;
	ARbArmSt 											: ARRAY [0..iArmQty] OF BOOL; (*Activated Bit*)
	DSTimeTrackerInput 									: DSV2_TimeTrackerInput;
	bAutoModeEn										: BOOL;
	bSimulatorModeEn 									: BOOL;
	iAutoModeCallRecipeTimeBlock_ProductRecipeNo 		: INT;
	iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo 	: INT;
	iCountFilterTime_Sec 									: INT;
	iProductRecipeChangedDelayTime_ms 					: INT;
	iLoadingCallArmTime 									: INT;
	bMasterTimeBlockScanningEn 							: BOOL;
	ARbBusyLinkUpStnEn 									: ARRAY [1..iBusyLinkUpSetQty] OF BOOL;
	AR2siStnBusyLinkUpStn 								: ARRAY [1..iBusyLinkUpSetQty, 1..iBusyLinkUpStnQty] OF INT;
	ARDsSSERSourceMinMaxTime_Uni						: ARRAY [1..iStnQty] OF DSV2_SSERSourceMinMaxTime;


END_VAR

VAR_OUTPUT
	bTrackerCompleted 									: BOOL;

	bNoUldStnIDErr 										: BOOL;
	bInvalidCallRecipeTimeBlockNo						: BOOL;
	bCallRTB_NoTrackerInfo								: BOOL;
	bCallRTB_CallOK 										: BOOL;
	ARbProductRecipeTimeBlockAvailable 					: ARRAY [0..iProductRecipeArrayQty] OF BOOL;


END_VAR

VAR_OUTPUT PERSISTENT

	AR2SiArmRunningTime								: ARRAY [1..iRecipeBlockQty, 1..iArmQty] OF INT;
	ARiStnRunningTime									: ARRAY [1..iRecipeBlockQty] OF INT;

END_VAR


VAR_IN_OUT
(*	ARiLdStnID											: INT;
	ARiUldStnID											: INT;
*)	ARiArmID											: ARRAY [1..iArmQty] OF INT;
	AR2SiBufferRecipeTimeBlock 							: ARRAY[1..iRecipeBlockQty, 1..9] OF INT;
	AR2SiCalledRecipeTimeBlockNoCallArmTime 			: ARRAY[1..iRecipeBlockQty, 1..9] OF INT;
	AR2SiCalledRecipeTimeBlockWithCallArmTime 			: ARRAY[1..iRecipeBlockQty, 1..9] OF INT;
(*	DSLdBasketInfo									 	: DSV2_BasketInfo;*)

(* RecipeTimeBlockDetail
	1 - Start Time
	2 - End Time
	3 - Stn ID
	4 - Step No (Based on Product Recipe PnP Step No)
	5 - Busy Time <Duration> = EndTime - StartTime + 1; 
	6 - Min Time (Define by User -> Process Time Per Station)
	7 - Max Time (Define by User -> For Process Tank only)
	8 - Eff Time (Final Process Time, Used on Station Timer and Call Arm Used)
	9 - BusyLink Reference 
		0		=Non
		11-19 	= BusyLinkGroupMaster No 1
		21-29 	= BusyLinkGroupMaster No 2
		=================================
		91-99 	= BusyLinkGroupMaster No 9

		111-119 	= BusyLinkGroupMaster No 1 - 1st Stn ID
		121-129 	= BusyLinkGroupMaster No 1 - 2nd Stn ID
		131-139 	= BusyLinkGroupMaster No 1 - 3rd Stn ID

		211-219 	= BusyLinkGroupMaster No 2 - 1st Stn ID
		221-229 	= BusyLinkGroupMaster No 2 - 2nd Stn ID
		231-239 	= BusyLinkGroupMaster No 2 - 3rd Stn ID

		911-919 	= BusyLinkGroupMaster No 9 - 1st Stn ID
		921-929 	= BusyLinkGroupMaster No 9 - 2nd Stn ID
		931-939 	= BusyLinkGroupMaster No 9 - 3rd Stn ID

		

*)

END_VAR


VAR PERSISTENT
	AR3SiRecipeTimeBlockMemoryNoCallArmTime						: ARRAY [1..iProductRecipeArrayQty, 1..iRecipeBlockQty, 1..9] OF INT;
	AR3SiRecipeTimeBlockMemoryWithCallArmTime						: ARRAY [1..iProductRecipeArrayQty, 1..iRecipeBlockQty, 1..9] OF INT;
	OnTime															: TON;
	OnTimeRE														: R_TRIG;
	bScanningRE														: R_TRIG;
	bResetRE	 													: ARRAY [1..iProductRecipeArrayQty] OF R_TRIG;
	ResetFL															: INT;
	ResetSFL														: INT;


	ARbArmStRE														: ARRAY [1..iArmQty] OF R_TRIG;
	ARbArmStFE														: ARRAY [1..iArmQty] OF F_TRIG;
	ARiArmStepCounter												: ARRAY [1..iArmQty] OF INT;
	iStnStepCounter													: INT;

	ARiArmIDArrayLocationCounter										: ARRAY [1..iArmQty] OF INT;

	bStnStopRE														: R_TRIG;
	bStnStartRE														: R_TRIG;

	RtrigFL															: INT;
	ARiArmStOnTimeFilter												: ARRAY [1..iArmQty] OF INT;
	iStnOnTimeFilter													: INT;

	iArmOffFL														: INT;

	bArmInProgress													: BOOL;
	iArmFilterFL														: INT;
	iAutoResetFL														: INT;

	ResetBufferFL													: INT;
	iTracker															: INT;
	iCheckProductRecipeStep											: INT;
	iEndStep															: INT;
	bEndStepFound													: BOOL;
	iTransferIDFL														: INT;
	iTransferIDSFL													: INT;
	iRunningTimeFL													: INT;
	iTransferBufferRTBFL												: INT;
	iTransferBufferRTBSFL												: INT;
	iSaveToMemoryFL												: INT;
	iModStnMemoryFL												: INT;

	ARbArmCountEN													: ARRAY [1..iArmQty] OF BOOL;
	bStnCountEN														: BOOL;
	iClearRunTimeFL													: INT;
	iClearRunTimeSFL												: INT;
	CallRTBFL														: INT;
	iClearCallRTBFL													: INT;

(*End*)

	Step														: INT;
	OnTimeHR													: BOOL;
	ResetFL2													: INT;

	ARbCountStRE												: ARRAY [1..iStnQty] OF R_TRIG;
	ARbCountStFE												: ARRAY [1..iStnQty] OF F_TRIG;
	ARiStnCounter												: ARRAY [1..iStnQty] OF INT;


	iTimeCounterFL												: INT;
	iTimeCounterFLSTN											: INT;

	iCounter														: BOOL;
	iClearCountFL												: INT;

	AR50Arm1Time_Sec 											: ARRAY[1..50] OF INT;
	AR50Arm2Time_Sec 											: ARRAY[1..50] OF INT;

	AR50Arm1PT_Sec 											: ARRAY [1..50] OF INT;
	AR50Arm2PT_Sec 											: ARRAY [1..50] OF INT;


	bCounterIncreaseEn											: BOOL;
(*	iArm1StationCounter: INT;*)
	bCounterIncreaseEnSTN										: BOOL;
	iPushDataFL													: INT;
	AR50_iArmTime												: ARRAY [1..50] OF INT;
	AR50_iStnTime												: ARRAY [1..50] OF INT;
	bTestA														: BOOL;
END_VAR


VAR
	bCountStArm1FE												: BOOL;
	iArmInterchangeStn											: BOOL;

	bStnCountStartEN												: BOOL;

	bCallRTB_NoTrackerInfoRE									: R_TRIG;
	bInvalidCallRecipeTimeBlockNoRE								: R_TRIG;
	iBufferAutoModeCallRecipeTimeBlock_ProductRecipeNo			: INT;
	bProductRecipeChangesFound									: BOOL;
	tProductRecipeChangesFound									: TON;
	iBufferSimulatorModeCallRecipeTimeBlock_ProductRecipeNo		: INT;
	bSimulatorModeEn_RE										: R_TRIG;
	bAutoModeEn_RE											: R_TRIG;
	b															: BOOL;
	iCheckPRTBFL												: INT;
	iBusyLinkCounter: INT;
	iBusyLinkEnSearchFL: INT;
	iBusyLinkStnSearchFL: INT;
	iBusyLinkSetSearchFL: INT;
	iBusyLinkStnFL: INT;
	iRecipeBlockSearchFL: INT;
	iBusyLinkCopyFL: INT;
	AR2SiCalledRecipeTimeBlockNoCallArmTimeEmpty 			: ARRAY[1..iRecipeBlockQty, 1..9] OF INT;
	AR2SiCalledRecipeTimeBlockWithCallArmTimeEmpty 			: ARRAY[1..iRecipeBlockQty, 1..9] OF INT;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[


XML_ImportExport();


(*1Sec Clock Pulse*)
IF bScanningEN THEN
OnTime(IN:=NOT OnTime.Q , PT:=T#1s , Q=> , ET=> );
OnTimeRE(CLK:=OnTime.Q , Q=> );
END_IF

bScanningRE(CLK:=bScanningEN , Q=> );

(*
(*Limit Loading and Unloading ID*)
IF ARiLdStnID < iStnQty THEN
ARiLdStnID:= iStnQty + 1;
END_IF
IF ARiUldStnID < iStnQty THEN
ARiUldStnID:= iStnQty + 2;
END_IF
*)

(*MinMax Time Called during tracker mode*)
(*
	DSLdBasketInfo.DSV2MinMaxEffTime.ARiStnSeqRepNo 		:= DSV2MTBMinMaxEffTime.ARiStnSeqRepNo;
	DSLdBasketInfo.DSV2MinMaxEffTime.ARiTransferStationNo		:= DSV2MTBMinMaxEffTime.ARiTransferStationNo;

*)


(*Reset Buffer TimeBlock*)

IF bScanningRE.Q THEN
ResetBufferFL := 1;

	FOR ResetBufferFL := 1 TO iRecipeBlockQty DO

		IF ResetBufferFL >= 1 AND ResetBufferFL <= iRecipeBlockQty THEN
	
			AR2SiBufferRecipeTimeBlock[ResetBufferFL, 1] := 0;
			AR2SiBufferRecipeTimeBlock[ResetBufferFL, 2] := 0;
			AR2SiBufferRecipeTimeBlock[ResetBufferFL, 3] := 0;
			AR2SiBufferRecipeTimeBlock[ResetBufferFL, 4] := 0;
			AR2SiBufferRecipeTimeBlock[ResetBufferFL, 5] := 0;
			AR2SiBufferRecipeTimeBlock[ResetBufferFL, 6] := 0;
			AR2SiBufferRecipeTimeBlock[ResetBufferFL, 7] := 0;
			AR2SiBufferRecipeTimeBlock[ResetBufferFL, 8] := 0;
			AR2SiBufferRecipeTimeBlock[ResetBufferFL, 9] := 0;

		END_IF

	END_FOR

END_IF

(*Manual Reset TimeBlock*)

ResetFL := 1;

FOR ResetFL := 1 TO iProductRecipeArrayQty DO

	IF ResetFL >= 1 AND ResetFL <= iProductRecipeArrayQty THEN
		bResetRE[ResetFL](CLK:=ARbReset[ResetFL] , Q=> );

		IF bResetRE[ResetFL].Q THEN
			ResetSFL :=1;
	
			FOR ResetSFL := 1 TO iRecipeBlockQty DO
	
				IF ResetSFL >= 1 AND ResetSFL <= iRecipeBlockQty THEN
	
					AR3SiRecipeTimeBlockMemoryNoCallArmTime[ResetFL, ResetSFL, 1] := 0;
					AR3SiRecipeTimeBlockMemoryNoCallArmTime[ResetFL, ResetSFL, 2] := 0;
					AR3SiRecipeTimeBlockMemoryNoCallArmTime[ResetFL, ResetSFL, 3] := 0;
					AR3SiRecipeTimeBlockMemoryNoCallArmTime[ResetFL, ResetSFL, 4] := 0;
					AR3SiRecipeTimeBlockMemoryNoCallArmTime[ResetFL, ResetSFL, 5] := 0;
					AR3SiRecipeTimeBlockMemoryNoCallArmTime[ResetFL, ResetSFL, 6] := 0;
					AR3SiRecipeTimeBlockMemoryNoCallArmTime[ResetFL, ResetSFL, 7] := 0;
					AR3SiRecipeTimeBlockMemoryNoCallArmTime[ResetFL, ResetSFL, 8] := 0;
					AR3SiRecipeTimeBlockMemoryNoCallArmTime[ResetFL, ResetSFL, 9] := 0;

					AR3SiRecipeTimeBlockMemoryWithCallArmTime[ResetFL, ResetSFL, 1] := 0;
					AR3SiRecipeTimeBlockMemoryWithCallArmTime[ResetFL, ResetSFL, 2] := 0;
					AR3SiRecipeTimeBlockMemoryWithCallArmTime[ResetFL, ResetSFL, 3] := 0;
					AR3SiRecipeTimeBlockMemoryWithCallArmTime[ResetFL, ResetSFL, 4] := 0;
					AR3SiRecipeTimeBlockMemoryWithCallArmTime[ResetFL, ResetSFL, 5] := 0;
					AR3SiRecipeTimeBlockMemoryWithCallArmTime[ResetFL, ResetSFL, 6] := 0;
					AR3SiRecipeTimeBlockMemoryWithCallArmTime[ResetFL, ResetSFL, 7] := 0;
					AR3SiRecipeTimeBlockMemoryWithCallArmTime[ResetFL, ResetSFL, 8] := 0;
					AR3SiRecipeTimeBlockMemoryWithCallArmTime[ResetFL, ResetSFL, 9] := 0;
				END_IF

			END_FOR

		END_IF

	END_IF

END_FOR

(*Auto Reset*)
IF NOT bScanningEN OR bScanningRE.Q THEN
iAutoResetFL := 1;

	FOR iAutoResetFL := 1 TO iArmQty DO

		IF iAutoResetFL >= 1 AND iAutoResetFL <= iArmQty THEN

			ARiArmStOnTimeFilter[iAutoResetFL] := 0;
			ARbArmCountEN[iAutoResetFL] := FALSE;
			ARiArmStepCounter[iAutoResetFL] := 1;
			ARiArmIDArrayLocationCounter[iAutoResetFL] := 1;
		END_IF

	END_FOR


iClearRunTimeFL := 1;

	FOR iClearRunTimeFL := 1 TO iRecipeBlockQty DO
		IF iClearRunTimeFL >0 AND iClearRunTimeFL <= iRecipeBlockQty THEN
		iClearRunTimeSFL := 1;

			FOR iClearRunTimeSFL := 1 TO iArmQty DO
				IF iClearRunTimeSFL >0 AND iClearRunTimeSFL <= iArmQty THEN
					AR2SiArmRunningTime[iClearRunTimeFL, iClearRunTimeSFL] := 0;
				END_IF
			END_FOR

				ARiStnRunningTime[iClearRunTimeFL] := 0;

		END_IF
	END_FOR

			IF bStnCountStartEN AND OnTimeRE.Q THEN
			ARiStnRunningTime[iStnStepCounter] := ARiStnRunningTime[iStnStepCounter]+1;
			END_IF



iStnOnTimeFilter := 0;
bStnCountEN := FALSE;
bArmInProgress := FALSE;
bStnCountStartEN := FALSE;
iTracker := 0;
bEndStepFound := FALSE;
bNoUldStnIDErr := FALSE;
iEndStep := 0;
iStnStepCounter := 1;
bTrackerCompleted:= FALSE;

END_IF


(*Check Arm In Progress*)
bArmInProgress := FALSE;
iArmOffFL := 1;

FOR iArmOffFL := 1 TO iArmQty DO

	IF iArmOffFL > 0 AND iArmOffFL <= iArmQty THEN

		IF ARbArmSt[iArmOffFL] THEN
		bArmInProgress := TRUE;
		iArmOffFL := iArmQty + 1;
		END_IF

	END_IF

END_FOR

bStnStartRE(CLK:=NOT bArmInProgress , Q=> );
bStnStopRE(CLK:=bArmInProgress , Q=> );



(* Generate Arm triggering R_TRIG, F_TRIG and Managed Arm and Stn Counter*)
IF bScanningEN THEN

RtrigFL := 1;

	FOR RtrigFL := 1 TO iArmQty DO
		IF RtrigFL >= 1 AND RtrigFL <= iArmQty THEN

			ARbArmStRE[RtrigFL](CLK:=ARbArmSt[RtrigFL] , Q=> );
			ARbArmStFE[RtrigFL](CLK:=ARbArmSt[RtrigFL] , Q=> );

			IF ARbArmStFE[RtrigFL].Q AND ARbArmCountEN[RtrigFL]  THEN
			ARiArmStepCounter[RtrigFL] := ARiArmStepCounter[RtrigFL]+1;
			END_IF

			IF ARbArmStFE[RtrigFL].Q AND NOT ARbArmCountEN[RtrigFL]  THEN
			AR2SiArmRunningTime[ARiArmStepCounter[RtrigFL], RtrigFL] := 0;
			END_IF


		END_IF
	END_FOR

			IF bStnStopRE.Q AND bStnCountEN THEN
			iStnStepCounter := iStnStepCounter+1;
			END_IF

			IF bStnStopRE.Q AND NOT bStnCountEN THEN
			ARiStnRunningTime[iStnStepCounter] := 0;
			END_IF
END_IF




(* Capture Time*)

IF bScanningEN THEN

iRunningTimeFL := 1;

	FOR iRunningTimeFL := 1 TO iArmQty DO

		IF iRunningTimeFL >0 AND iRunningTimeFL <= iArmQty THEN

			IF ARbArmSt[iRunningTimeFL] AND OnTimeRE.Q THEN
			AR2SiArmRunningTime[ARiArmStepCounter[iRunningTimeFL], iRunningTimeFL] := AR2SiArmRunningTime[ARiArmStepCounter[iRunningTimeFL], iRunningTimeFL]+1;
			END_IF
		END_IF
	END_FOR

			IF bStnCountStartEN AND OnTimeRE.Q THEN
			ARiStnRunningTime[iStnStepCounter] := ARiStnRunningTime[iStnStepCounter]+1;
			END_IF

END_IF




(* Tracker Case Control*)

IF bScanningRE.Q THEN
iTracker := 1;
END_IF


CASE iTracker OF

0:;

1: (*Search End Step from Product Recipe Info*)
iCheckProductRecipeStep := 1;
bEndStepFound := FALSE;

	FOR iCheckProductRecipeStep := 1 TO iProductRecipeStepArrayQty DO

		IF iCheckProductRecipeStep >0 AND iCheckProductRecipeStep <= iProductRecipeStepArrayQty THEN

			IF ARiUldStnID[DSTimeTrackerInput.iUldGroupNo] = DSTimeTrackerInput.ARiTransferStationNo[iCheckProductRecipeStep] THEN
			iEndStep := iCheckProductRecipeStep;
			bEndStepFound := TRUE;
			iCheckProductRecipeStep := iProductRecipeStepArrayQty +1;
			END_IF

		END_IF

	END_FOR

	IF iCheckProductRecipeStep > iProductRecipeStepArrayQty  AND NOT bEndStepFound THEN
	iTracker := 91; (*Error, Uld station not found*)
	END_IF

	IF iCheckProductRecipeStep > iProductRecipeStepArrayQty  AND bEndStepFound THEN
	iTracker := 2; (*EndStepFound, proceed next Case*)
	bEndStepFound := FALSE;
	END_IF

2: (*Transfer ID to BufferTimeBlock*)
(*

1:
iScanFL := 1;
	FOR iScanFL := 1 TO iProductRecipeStepArrayQty DO
		IF iScanFL >= 1 AND iScanFL <= iProductRecipeStepArrayQty THEN
			IF (DSV2MTBMinMaxEffTime.ARiTransferStationNo[iScanFL] >= 1 AND DSV2MTBMinMaxEffTime.ARiTransferStationNo[iScanFL] <= iStnQty)
			AND (DSV2MTBMinMaxEffTime.ARiStnSeqRepNo[iScanFL] >= 1 AND DSV2MTBMinMaxEffTime.ARiStnSeqRepNo[iScanFL] <= iStationSequenceRecipeArrayQty) THEN

				DSV2MTBMinMaxEffTime.ARiMinTime[iScanFL]			:= ARDsSSERSourceMinMaxTime_Uni[DSV2MTBMinMaxEffTime.ARiTransferStationNo[iScanFL]].ARiMinTime[DSV2MTBMinMaxEffTime.ARiStnSeqRepNo[iScanFL]];
				DSV2MTBMinMaxEffTime.ARiMaxTime[iScanFL]			:= ARDsSSERSourceMinMaxTime_Uni[DSV2MTBMinMaxEffTime.ARiTransferStationNo[iScanFL]].ARiMaxTime[DSV2MTBMinMaxEffTime.ARiStnSeqRepNo[iScanFL]];

				IF bTempPushEffTime THEN
					DSV2MTBMinMaxEffTime.ARiEffTime[iScanFL]		:= ARDsSSERSourceMinMaxTime_Uni[DSV2MTBMinMaxEffTime.ARiTransferStationNo[iScanFL]].ARiMinTime[DSV2MTBMinMaxEffTime.ARiStnSeqRepNo[iScanFL]];

				END_IF


			ELSE

				DSV2MTBMinMaxEffTime.ARiMinTime[iScanFL]			:= ARiMinTimeEmpty[iScanFL] 				;
				DSV2MTBMinMaxEffTime.ARiMaxTime[iScanFL]			:= ARiMaxTimeEmpty[iScanFL] 				;
				DSV2MTBMinMaxEffTime.ARiEffTime[iScanFL]			:= ARiEffTimeEmpty[iScanFL] 				;

			END_IF
		END_IF
	END_FOR

iScanFL := 2;
iBufferProductRecipeNo := DSV2MTBMinMaxEffTime.iProductRecipeNo ;

*)
iTransferIDFL := 1;


	FOR iTransferIDFL := 1 TO iEndStep DO

		IF iTransferIDFL > 0 AND iTransferIDFL <= iEndStep THEN
			iTransferIDSFL := 1;
			FOR iTransferIDSFL := 1 TO iArmQty DO
				IF DSTimeTrackerInput.ARiCallArmNo[iTransferIDFL] = iTransferIDSFL THEN
				(*Min/Max - Start*)
				AR2SiBufferRecipeTimeBlock[iTransferIDFL+iTransferIDFL-1,4] := iTransferIDFL;
				(*Min/Max - End*)
				AR2SiBufferRecipeTimeBlock[iTransferIDFL+iTransferIDFL-1,3] := ARiArmID[iTransferIDSFL];
				AR2SiBufferRecipeTimeBlock[iTransferIDFL+iTransferIDFL-1,2] := ARiArmIDArrayLocationCounter[iTransferIDSFL];
				ARiArmIDArrayLocationCounter[iTransferIDSFL] := ARiArmIDArrayLocationCounter[iTransferIDSFL]+1;

				END_IF
			END_FOR
		END_IF

		IF iTransferIDFL > 0 AND iTransferIDFL < iEndStep THEN
			AR2SiBufferRecipeTimeBlock[iTransferIDFL+iTransferIDFL,3] := DSTimeTrackerInput.ARiTransferStationNo[iTransferIDFL];
			(*Min/Max - Start*)
			AR2SiBufferRecipeTimeBlock[iTransferIDFL+iTransferIDFL,4] := iTransferIDFL;
			AR2SiBufferRecipeTimeBlock[iTransferIDFL+iTransferIDFL,6] := ARDsSSERSourceMinMaxTime_Uni[DSTimeTrackerInput.ARiTransferStationNo[iTransferIDFL]].ARiMinTime[DSTimeTrackerInput.ARiStnSeqRepNo[iTransferIDFL]];
			AR2SiBufferRecipeTimeBlock[iTransferIDFL+iTransferIDFL,7] := ARDsSSERSourceMinMaxTime_Uni[DSTimeTrackerInput.ARiTransferStationNo[iTransferIDFL]].ARiMaxTime[DSTimeTrackerInput.ARiStnSeqRepNo[iTransferIDFL]];
			(*Min/Max - End*)





		END_IF


	END_FOR

iTracker := 3;

3:;(*Transfer Running Time to RecipeTimeBlock*)


iTransferBufferRTBFL := 1;


	FOR iTransferBufferRTBFL := 1 TO iEndStep DO

		IF iTransferBufferRTBFL > 0 AND iTransferBufferRTBFL <= iEndStep THEN
			iTransferBufferRTBSFL := 1;
			FOR iTransferBufferRTBSFL := 1 TO iArmQty DO
				IF AR2SiBufferRecipeTimeBlock[iTransferBufferRTBFL+iTransferBufferRTBFL-1,3] = ARiArmID[iTransferBufferRTBSFL] THEN
				AR2SiBufferRecipeTimeBlock[iTransferBufferRTBFL+iTransferBufferRTBFL-1,1] := AR2SiArmRunningTime[(**)AR2SiBufferRecipeTimeBlock[iTransferBufferRTBFL+iTransferBufferRTBFL-1,2]  (**), iTransferBufferRTBSFL];
				END_IF
			END_FOR
		END_IF

		IF iTransferBufferRTBFL > 0 AND iTransferBufferRTBFL < iEndStep THEN
			AR2SiBufferRecipeTimeBlock[iTransferBufferRTBFL+iTransferBufferRTBFL,1] := ARiStnRunningTime[iTransferBufferRTBFL];
		END_IF


	END_FOR

IF AR2SiBufferRecipeTimeBlock[(iEndStep*2)-1,1] > iCountFilterTime_Sec AND NOT bArmInProgress THEN
iTracker := 4;
END_IF

4:; (*Save To Memory*)

iSaveToMemoryFL := 1;
iModStnMemoryFL := 1;

	FOR iSaveToMemoryFL := 1 TO iRecipeBlockQty DO

		IF iSaveToMemoryFL > 0 AND iSaveToMemoryFL <= iRecipeBlockQty THEN
			IF iSaveToMemoryFL = 1 AND AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 3]<>0 THEN
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 1] := 1;
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 2] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 1](*+iLoadingCallArmTime*);
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 3] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 3];

			(*Min/Max - Start*)
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 4] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 4];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 6] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 6];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 7] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 7];
			(*Min/Max - End*)

			END_IF

			IF iSaveToMemoryFL > 1 AND AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 3]<>0 THEN
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 1] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL-1, 2]+1;
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 2] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL-1, 2]+AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 1];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 3] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 3];

			(*Min/Max - Start*)
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 4] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 4];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 6] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 6];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 7] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 7];
			(*Min/Max - End*)
			END_IF


		END_IF

		IF iSaveToMemoryFL > 0 AND iSaveToMemoryFL <= iRecipeBlockQty THEN
			IF iSaveToMemoryFL = 1 AND AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 3]<>0 THEN
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 1] := 1;
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 2] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 1]+iLoadingCallArmTime;
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 3] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 3];

			(*Min/Max - Start*)
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 4] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 4];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 6] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 6];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 7] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 7];
			(*Min/Max - End*)
			END_IF




			IF iSaveToMemoryFL > 1 AND AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 3]<>0 THEN
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 1] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL-1, 2]+1;
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 2] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL-1, 2]+AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 1];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 3] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 3];

			(*Min/Max - Start*)
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 4] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 4];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 6] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 6];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iSaveToMemoryFL, 7] := AR2SiBufferRecipeTimeBlock[iSaveToMemoryFL, 7];
			(*Min/Max - End*)
			END_IF


		END_IF

	END_FOR


	FOR iModStnMemoryFL := 1 TO iRecipeBlockQty DO

		IF iModStnMemoryFL > 0 AND iModStnMemoryFL <= iRecipeBlockQty THEN
			IF iModStnMemoryFL > 1
			AND AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 3] > 0
			AND AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 3] <= iStnQty THEN
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 1] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL-1, 1];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 2] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL+1, 2];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 3] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 3];

			(*Min/Max - Start*)
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 5] := (** Continue Next Row - Too Long*)
			(1+AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 2] (** Continue Next Row - Too Long*)
			- AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 1]);
			(*Min/Max - End*)


			END_IF

		END_IF

		IF iModStnMemoryFL > 0 AND iModStnMemoryFL <= iRecipeBlockQty THEN
			IF iModStnMemoryFL > 1
			AND AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 3] > 0
			AND AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 3] <= iStnQty THEN
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 1] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL-1, 1];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 2] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL+1, 2];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 3] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 3];

			(*Min/Max - Start*)
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 5] := (** Continue Next Row - Too Long*)
			(1+AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 2] (** Continue Next Row - Too Long*)
			- AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo, iModStnMemoryFL, 1]);
			(*Min/Max - End*)
			END_IF

		END_IF


	END_FOR






iTracker := 5;


5: (*Generate Unloading Usage Time*)
AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,1] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,1];
AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,2] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,2];
AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,3] := ARiUldStnID[DSTimeTrackerInput.iUldGroupNo];
			(*Min/Max - Start*)
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,4] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,4];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,5] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,5];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,6] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,6];
			AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,7] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,7];
			(*Min/Max - End*)

AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,1] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,1];
AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,2] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,2];
AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,3] := ARiUldStnID[DSTimeTrackerInput.iUldGroupNo];
			(*Min/Max - Start*)
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,4] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,4];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,5] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,5];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,6] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,6];
			AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iEndStep*2,7] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)-1,7];
			(*Min/Max - End*)

iTracker := 6;



6: (* Apply BusyLinkUp*)

iBusyLinkCounter := 1;

iBusyLinkEnSearchFL := 1;

	FOR iBusyLinkEnSearchFL := 1 TO iBusyLinkUpSetQty DO
		IF iBusyLinkEnSearchFL >= 1 AND iBusyLinkEnSearchFL <= iBusyLinkUpSetQty THEN
			IF ARbBusyLinkUpStnEn[iBusyLinkEnSearchFL] THEN

				iBusyLinkStnFL := 1;
				FOR iBusyLinkStnFL := 1 TO iBusyLinkUpStnQty DO
					IF iBusyLinkStnFL >= 1 AND iBusyLinkStnFL <= iBusyLinkUpStnQty THEN

						iRecipeBlockSearchFL := 1;
						FOR iRecipeBlockSearchFL := 1 TO iRecipeBlockQty DO
							IF iRecipeBlockSearchFL >= 1 AND iRecipeBlockSearchFL <= iEndStep*2 THEN
								IF AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,3] = AR2siStnBusyLinkUpStn[iBusyLinkEnSearchFL, iBusyLinkStnFL] THEN

								(*Min/Max - Start*)
								AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,9] := (iBusyLinkEnSearchFL*10)+iBusyLinkStnFL;
								AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,9] := (iBusyLinkEnSearchFL*10)+iBusyLinkStnFL;
								(*Min/Max - End*)

									iBusyLinkCopyFL := 1;
									FOR iBusyLinkCopyFL := 1 TO iBusyLinkUpStnQty DO
										IF iBusyLinkCopyFL >= 1 AND iBusyLinkCopyFL <= iBusyLinkUpStnQty THEN
											IF iBusyLinkStnFL <> iBusyLinkCopyFL THEN

												AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,1] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,1];
												AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,2] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,2];
												AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,3] := AR2siStnBusyLinkUpStn[iBusyLinkEnSearchFL, iBusyLinkCopyFL];

												(*Min/Max - Start*)
												AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,4] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,4];
												AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,5] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,5];
												AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,6] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,6];
												AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,7] := AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,7];

												AR3SiRecipeTimeBlockMemoryNoCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,9] := (iBusyLinkEnSearchFL*100)+(iBusyLinkStnFL*10) + iBusyLinkCopyFL;
												(*Min/Max - End*)

												AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,1] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,1];
												AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,2] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,2];
												AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,3] := AR2siStnBusyLinkUpStn[iBusyLinkEnSearchFL, iBusyLinkCopyFL];

												(*Min/Max - Start*)
												AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,4] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,4];
												AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,5] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,5];
												AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,6] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,6];
												AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,7] := AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,iRecipeBlockSearchFL,7];

												AR3SiRecipeTimeBlockMemoryWithCallArmTime[DSTimeTrackerInput.iTimeTrackerProductRecipeNo,(iEndStep*2)+iBusyLinkCounter,9] := (iBusyLinkEnSearchFL*100)+(iBusyLinkStnFL*10) + iBusyLinkCopyFL;
												(*Min/Max - End*)

												iBusyLinkCounter := iBusyLinkCounter+1;
											END_IF
										END_IF
									END_FOR
								END_IF
							END_IF
						END_FOR
					END_IF
				END_FOR
			END_IF
		END_IF
	END_FOR



(******************************)


iTracker := 7;

7:; (*Completed and idling*)
bTrackerCompleted := TRUE;

(*
AR2SiArmRunningTime
ARbArmCountEN[iArmFilterFL]


ARiStnRunningTime
bStnCountEN

ARbArmStFE[RtrigFL].Q
bStnStopRE.Q
*)



91: (*Error, Uld station not found*)
bNoUldStnIDErr := TRUE;



END_CASE


(* Filter Signal Noise with delay time*)

IF bScanningEN THEN

	IF bStnStartRE.Q THEN
	bStnCountStartEN := TRUE;
	END_IF

	IF bStnStopRE.Q THEN
	bStnCountStartEN := FALSE;
	END_IF




	iArmFilterFL := 1;

	FOR iArmFilterFL := 1 TO iArmQty DO

		IF iArmFilterFL >0 AND iArmFilterFL <= iArmQty THEN

			IF ARbArmStRE[iArmFilterFL].Q OR bStnStartRE.Q THEN
			ARiArmStOnTimeFilter[iArmFilterFL] := 0;
			iStnOnTimeFilter := 0;
			END_IF

			IF ARbArmSt[iArmFilterFL] AND OnTimeRE.Q THEN
			ARiArmStOnTimeFilter[iArmFilterFL] := ARiArmStOnTimeFilter[iArmFilterFL]+1;
			END_IF

			IF ARiArmStOnTimeFilter[iArmFilterFL] > iCountFilterTime_Sec THEN
			ARbArmCountEN[iArmFilterFL] := TRUE;
			ELSE
			ARbArmCountEN[iArmFilterFL] := FALSE;
			END_IF

		END_IF

	END_FOR


			IF bStnCountStartEN AND OnTimeRE.Q THEN
			iStnOnTimeFilter := iStnOnTimeFilter+1;
			END_IF

			IF iStnOnTimeFilter > iCountFilterTime_Sec THEN
			bStnCountEN := TRUE;
			ELSE
			bStnCountEN := FALSE;
			END_IF

END_IF


tProductRecipeChangesFound(IN:=bProductRecipeChangesFound  , PT:=INT_TO_TIME(iProductRecipeChangedDelayTime_ms) , Q=> , ET=> );
bAutoModeEn_RE(CLK:=bAutoModeEn AND NOT bMasterTimeBlockScanningEn AND NOT tProductRecipeChangesFound.Q AND NOT bScanningEN AND iAutoModeCallRecipeTimeBlock_ProductRecipeNo >0  , Q=> );
bSimulatorModeEn_RE(CLK:=bSimulatorModeEn AND NOT bMasterTimeBlockScanningEn AND NOT tProductRecipeChangesFound.Q AND NOT  bScanningEN AND iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo >0  , Q=> );


(*ProductRecipeNo changes check*)

IF bAutoModeEn_RE.Q THEN
iBufferAutoModeCallRecipeTimeBlock_ProductRecipeNo := iAutoModeCallRecipeTimeBlock_ProductRecipeNo;
END_IF

IF bSimulatorModeEn_RE.Q THEN
iBufferSimulatorModeCallRecipeTimeBlock_ProductRecipeNo := iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo;
END_IF


IF tProductRecipeChangesFound.Q THEN
bProductRecipeChangesFound := FALSE;
END_IF

IF bAutoModeEn THEN

	IF iBufferAutoModeCallRecipeTimeBlock_ProductRecipeNo <> iAutoModeCallRecipeTimeBlock_ProductRecipeNo  THEN
		bProductRecipeChangesFound := TRUE;
		iBufferAutoModeCallRecipeTimeBlock_ProductRecipeNo := iAutoModeCallRecipeTimeBlock_ProductRecipeNo;
	END_IF

ELSIF bSimulatorModeEn THEN


	IF iBufferSimulatorModeCallRecipeTimeBlock_ProductRecipeNo <> iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo  THEN
		bProductRecipeChangesFound := TRUE;
		iBufferSimulatorModeCallRecipeTimeBlock_ProductRecipeNo := iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo;
	END_IF

END_IF



(*Call Recipe Time Block*)

bCallRTB_NoTrackerInfoRE(CLK:=bCallRTB_NoTrackerInfo , Q=> );
bInvalidCallRecipeTimeBlockNoRE(CLK:=bInvalidCallRecipeTimeBlockNo , Q=> );

(*Clear CalledTimeBlock*)
IF NOT bMasterTimeBlockScanningEn AND (bAutoModeEn_RE.Q OR bSimulatorModeEn_RE.Q OR  (NOT bAutoModeEn AND NOT bSimulatorModeEn) OR bCallRTB_NoTrackerInfoRE.Q OR bInvalidCallRecipeTimeBlockNoRE.Q) THEN
iClearCallRTBFL := 1;
		FOR iClearCallRTBFL := 1 TO iRecipeBlockQty DO
			IF iClearCallRTBFL > 0 AND iClearCallRTBFL <= iRecipeBlockQty THEN
			AR2SiCalledRecipeTimeBlockNoCallArmTime[iClearCallRTBFL, 1] := 0;
			AR2SiCalledRecipeTimeBlockNoCallArmTime[iClearCallRTBFL, 2] := 0;
			AR2SiCalledRecipeTimeBlockNoCallArmTime[iClearCallRTBFL, 3] := 0;
			AR2SiCalledRecipeTimeBlockNoCallArmTime[iClearCallRTBFL, 4] := 0;
			AR2SiCalledRecipeTimeBlockNoCallArmTime[iClearCallRTBFL, 5] := 0;
			AR2SiCalledRecipeTimeBlockNoCallArmTime[iClearCallRTBFL, 6] := 0;
			AR2SiCalledRecipeTimeBlockNoCallArmTime[iClearCallRTBFL, 7] := 0;
			AR2SiCalledRecipeTimeBlockNoCallArmTime[iClearCallRTBFL, 8] := 0;
			AR2SiCalledRecipeTimeBlockNoCallArmTime[iClearCallRTBFL, 9] := 0;
			END_IF
		END_FOR

		FOR iClearCallRTBFL := 1 TO iRecipeBlockQty DO
			IF iClearCallRTBFL > 0 AND iClearCallRTBFL <= iRecipeBlockQty THEN
			AR2SiCalledRecipeTimeBlockWithCallArmTime[iClearCallRTBFL, 1] := 0;
			AR2SiCalledRecipeTimeBlockWithCallArmTime[iClearCallRTBFL, 2] := 0;
			AR2SiCalledRecipeTimeBlockWithCallArmTime[iClearCallRTBFL, 3] := 0;
			AR2SiCalledRecipeTimeBlockWithCallArmTime[iClearCallRTBFL, 4] := 0;
			AR2SiCalledRecipeTimeBlockWithCallArmTime[iClearCallRTBFL, 5] := 0;
			AR2SiCalledRecipeTimeBlockWithCallArmTime[iClearCallRTBFL, 6] := 0;
			AR2SiCalledRecipeTimeBlockWithCallArmTime[iClearCallRTBFL, 7] := 0;
			AR2SiCalledRecipeTimeBlockWithCallArmTime[iClearCallRTBFL, 8] := 0;
			AR2SiCalledRecipeTimeBlockWithCallArmTime[iClearCallRTBFL, 9] := 0;
			END_IF
		END_FOR
END_IF


(*Reset Flag*)
IF
(NOT bAutoModeEn AND NOT bSimulatorModeEn)
OR
bProductRecipeChangesFound
OR
(bAutoModeEN AND iAutoModeCallRecipeTimeBlock_ProductRecipeNo = 0)
OR
(bSimulatorModeEN AND iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo = 0)
THEN
	bInvalidCallRecipeTimeBlockNo := FALSE;
	bCallRTB_NoTrackerInfo := FALSE;
	bCallRTB_CallOK := FALSE;
END_IF





(*Call Time Block*)

IF
(( bAutoModeEN AND iAutoModeCallRecipeTimeBlock_ProductRecipeNo > 0 AND iAutoModeCallRecipeTimeBlock_ProductRecipeNo <= iProductRecipeArrayQty AND NOT ARbProductRecipeTimeBlockAvailable[iAutoModeCallRecipeTimeBlock_ProductRecipeNo])
OR
(bSimulatorModeEN AND iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo > 0 AND iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo <= iProductRecipeArrayQty AND NOT ARbProductRecipeTimeBlockAvailable[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo]))
THEN
bCallRTB_NoTrackerInfo := TRUE;
bCallRTB_CallOK := FALSE;

(*AutoMode Call*)
ELSIF bAutoModeEn
AND NOT bMasterTimeBlockScanningEn
AND NOT tProductRecipeChangesFound.Q
AND NOT bScanningEN
AND iAutoModeCallRecipeTimeBlock_ProductRecipeNo >0
THEN

			IF iAutoModeCallRecipeTimeBlock_ProductRecipeNo >0 THEN
			AR2SiCalledRecipeTimeBlockNoCallArmTime := AR2SiCalledRecipeTimeBlockNoCallArmTimeEmpty;
			AR2SiCalledRecipeTimeBlockWithCallArmTime := AR2SiCalledRecipeTimeBlockWithCallArmTimeEmpty;
			bInvalidCallRecipeTimeBlockNo := FALSE;

				IF AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, 1, 3] <> 0 THEN
				CallRTBFL := 1;

					FOR CallRTBFL := 1 TO iRecipeBlockQty DO
						IF CallRTBFL > 0 AND CallRTBFL <= iRecipeBlockQty THEN
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 1] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 1];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 2] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 2];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 3] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 3];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 4] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 4];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 5] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 5];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 6] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 6];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 7] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 7];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 8] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 8];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 9] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 9];
						END_IF
					END_FOR


				END_IF


				IF AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, 1, 3] <> 0 THEN
				CallRTBFL := 1;

					FOR CallRTBFL := 1 TO iRecipeBlockQty DO
						IF CallRTBFL > 0 AND CallRTBFL <= iRecipeBlockQty THEN
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 1] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 1];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 2] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 2];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 3] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 3];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 4] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 4];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 5] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 5];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 6] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 6];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 7] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 7];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 8] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 8];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 9] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iAutoModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 9];
						END_IF
					END_FOR
			
			
				END_IF

			ELSE
			bInvalidCallRecipeTimeBlockNo := TRUE;
			END_IF

			IF AR2SiCalledRecipeTimeBlockWithCallArmTime [1,3] <> 0 THEN
			bCallRTB_NoTrackerInfo := FALSE;
			bCallRTB_CallOK := TRUE;
			END_IF

(*SimulatorMode Call*)
ELSIF bSimulatorModeEn
AND NOT bMasterTimeBlockScanningEn
AND NOT tProductRecipeChangesFound.Q
AND NOT  bScanningEN
AND iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo >0
(*AND ARbProductRecipeTimeBlockAvailable[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo]
AND AR2SiCalledRecipeTimeBlockNoCallArmTime[1, 3] = 0*)
THEN

			IF iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo >0 THEN
			AR2SiCalledRecipeTimeBlockNoCallArmTime := AR2SiCalledRecipeTimeBlockNoCallArmTimeEmpty;
			AR2SiCalledRecipeTimeBlockWithCallArmTime := AR2SiCalledRecipeTimeBlockWithCallArmTimeEmpty;
			bInvalidCallRecipeTimeBlockNo := FALSE;

				IF AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, 1, 3] <> 0 THEN
				CallRTBFL := 1;

					FOR CallRTBFL := 1 TO iRecipeBlockQty DO
						IF CallRTBFL > 0 AND CallRTBFL <= iRecipeBlockQty THEN
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 1] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 1];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 2] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 2];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 3] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 3];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 4] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 4];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 5] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 5];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 6] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 6];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 7] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 7];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 8] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 8];
						AR2SiCalledRecipeTimeBlockNoCallArmTime[CallRTBFL, 9] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 9];
						END_IF
					END_FOR
			
			
				END_IF


				IF AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, 1, 3] <> 0 THEN
				CallRTBFL := 1;
			
					FOR CallRTBFL := 1 TO iRecipeBlockQty DO
						IF CallRTBFL > 0 AND CallRTBFL <= iRecipeBlockQty THEN
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 1] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 1];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 2] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 2];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 3] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 3];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 4] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 4];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 5] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 5];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 6] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 6];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 7] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 7];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 8] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 8];
						AR2SiCalledRecipeTimeBlockWithCallArmTime[CallRTBFL, 9] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iSimulatorModeCallRecipeTimeBlock_ProductRecipeNo, CallRTBFL, 9];
						END_IF
					END_FOR

			
				END_IF

			ELSE
			bInvalidCallRecipeTimeBlockNo := TRUE;
			END_IF


			IF AR2SiCalledRecipeTimeBlockWithCallArmTime [1,3] <> 0 THEN
			bCallRTB_NoTrackerInfo := FALSE;
			bCallRTB_CallOK := TRUE;
			END_IF


END_IF



(*Check Product Recipe Time Block Availibility *)
iCheckPRTBFL := 1;

	FOR iCheckPRTBFL := 1 TO iProductRecipeArrayQty DO
		IF iCheckPRTBFL >= 1 AND iCheckPRTBFL <= iProductRecipeArrayQty THEN

			IF  AR3SiRecipeTimeBlockMemoryNoCallArmTime[iCheckPRTBFL, 1, 3] > 0 THEN
			ARbProductRecipeTimeBlockAvailable[iCheckPRTBFL ] := TRUE;
			ELSE
			ARbProductRecipeTimeBlockAvailable[iCheckPRTBFL ] := FALSE;
			END_IF

		END_IF
	END_FOR]]></ST>
    </Implementation>
    <Action Name="XML_ImportExport" Id="{ad0d4e5e-9e6c-4f00-9e13-2b2626c2f81b}">
      <Implementation>
        <ST><![CDATA[(* XML Import Export Control *)
(*	ARiSubAction					: ARRAY [1..10] OF INT; (* 0-Idle, 1-Import, 2-Export, 3-Clear/Delete 8-Done *)*)

	IF 		ARiSubAction[2] = 1 THEN (*Write from Buffer to Actual Memory*)

				CallRTBFL := 1;

					FOR CallRTBFL := 1 TO iRecipeBlockQty DO
						IF CallRTBFL > 0 AND CallRTBFL <= iRecipeBlockQty THEN
						AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 1] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 1];
						AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 2] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 2];
						AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 3] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 3];
						AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 4] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 4];
						AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 5] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 5];
						AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 6] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 6];
						AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 7] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 7];
						AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 8] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 8];
						AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 9] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 9];

						AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 1] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 1];
						AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 2] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 2];
						AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 3] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 3];
						AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 4] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 4];
						AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 5] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 5];
						AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 6] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 6];
						AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 7] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 7];
						AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 8] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 8];
						AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 9] :=	 DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 9];
						END_IF
					END_FOR

				ARbProductRecipeTimeBlockAvailable[iXMLRecipeNo] := DSV3XML_Recipe.bProductRecipeTimeBlockAvailable ;

				ARiSubAction[2] := 8;
(*				IF iHMIRecipeNo = iXMLRecipeNo THEN
					bRecipeLoadPb := TRUE;
				END_IF
*)
	ELSIF	ARiSubAction[2] = 2 THEN (*Read from Actual to Buffer Memory*)

				CallRTBFL := 1;

					FOR CallRTBFL := 1 TO iRecipeBlockQty DO
						IF CallRTBFL > 0 AND CallRTBFL <= iRecipeBlockQty THEN
						DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 1] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 1];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 2] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 2];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 3] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 3];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 4] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 4];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 5] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 5];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 6] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 6];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 7] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 7];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 8] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 8];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockNoCallArmTime[CallRTBFL, 9] :=	 AR3SiRecipeTimeBlockMemoryNoCallArmTime[iXMLRecipeNo, CallRTBFL, 9];

						DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 1] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 1];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 2] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 2];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 3] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 3];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 4] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 4];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 5] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 5];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 6] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 6];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 7] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 7];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 8] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 8];
						DSV3XML_Recipe.AR2SiRecipeTimeBlockWithCallArmTime[CallRTBFL, 9] :=	 AR3SiRecipeTimeBlockMemoryWithCallArmTime[iXMLRecipeNo, CallRTBFL, 9];
						END_IF
					END_FOR

				DSV3XML_Recipe.bProductRecipeTimeBlockAvailable := ARbProductRecipeTimeBlockAvailable[iXMLRecipeNo];

				ARiSubAction[2] := 8;

	ELSIF	ARiSubAction[2] = 3 THEN (*DELETE Actual Memory*)

				AR3SiRecipeTimeBlockMemoryNoCallArmTime		:= AR3SiRecipeTimeBlockMemoryNoCallArmTime_Delete;
				AR3SiRecipeTimeBlockMemoryWithCallArmTime 		:= AR3SiRecipeTimeBlockMemoryWithCallArmTime_Delete;
				ARbProductRecipeTimeBlockAvailable 				:= ARbProductRecipeTimeBlockAvailable_Delete;

				ARiSubAction[2] := 8;
(*				IF iHMIRecipeNo = iXMLRecipeNo THEN
					bRecipeLoadPb := TRUE;
				END_IF
*)
	END_IF


]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="fbV2_FBPTimeTrackerG3">
      <LineId Id="211" Count="927" />
    </LineIds>
    <LineIds Name="fbV2_FBPTimeTrackerG3.XML_ImportExport">
      <LineId Id="0" Count="84" />
    </LineIds>
  </POU>
</TcPlcObject>