<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB3_HmiTF1800_UserlevelManagement" Id="{ee5f859a-e9ec-4d96-b04e-63d1d0ad6c10}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB3_HmiTF1800_UserlevelManagement
VAR_INPUT
	
	bLoginPB 					: BOOL;
	bLogoutPB 					: BOOL;
	iLoginNameId 				: REFERENCE TO INT; // The LoginName selection in HMI during User Login Pop-up Screen, the choosen user will translated as Array ID No and pass here.
	sPasswordField 				: REFERENCE TO STRING; // Similar to Var In/Out so that i can clear the password if login failed
	
	iUM_SelectedLoginNameId	 	: REFERENCE TO INT;		// User Management - Selected Login Name ID (Array No)

	sUM_CurrentPassword			: REFERENCE TO STRING;	// User Management - Current Password (For password change only)
	sUM_NewPassword				: REFERENCE TO STRING;	// User Management - New Password (For password change or new user registration)
	sUM_ConfirmPassword			: REFERENCE TO STRING;	// User Management - New Password (For password change or new user registration)

	sUM_NewUserLoginName		: REFERENCE TO STRING;	// User Management - New User Login Name
	sUM_NewUserGroupId			: REFERENCE TO INT;		// User Management - Select from UserGroupList

	sUM_NewUserOperatorIdentifier	: REFERENCE TO STRING;
	sUM_NewUserActorType			: REFERENCE TO eActor;
	sUM_NewUserLastName				: REFERENCE TO STRING;
	sUM_NewUserFirstName			: REFERENCE TO STRING;
//	sUM_NewUserGroupName			: REFERENCE TO WSTRING; // Generated by reference eto sUM_NewUserGroupId
	
	bUM_CreatePB				: BOOL;		// User Management - Button for New User creation
	bUM_EditPB					: BOOL;		// User Management - Button for Edit User
	bUM_DeletePB				: BOOL;		// User Management - Button for Delete User
	bUM_EnablePB				: BOOL; 	// to Enable selected User
	bUM_DisablePB				: BOOL; 	// to Temporary Disable selected User
	bUM_ConfirmPB				: BOOL;		// for Edit, Delete and Disable used. click to save
	bUM_ReturnPB				: BOOL;		// for Edit, Delete and Disable used, click to return without save.
		
END_VAR
VAR_OUTPUT
	dsHmiUserStatus_Active		: DS_HmiUserStatus;
	dsHmiUserStatus_Login		: DS_HmiUserStatus;
	dsHmiUserStatus_Logout		: DS_HmiUserStatus;
	
//	iActiveUserGroupId			: INT;
//	sActiveLoginName			: STRING;
	
//	sActiveOperatorIdentifier	: STRING;
//	eActiveActorType			: eActor;
//	sActiveLastName				: STRING;
//	sActiveFirstName			: STRING;
	wsActiveUserGroupName		: WSTRING;
	sMessage					: STRING;
	
END_VAR
VAR
	tsLocalSystemTimeStruct		: TIMESTRUCT;
	dsHmiUserStatus_Empty		: DS_HmiUserStatus;

	ARsUserGroup 				: ARRAY [0..5] OF WSTRING;	// Default UserGroup - Must Matched with HMI UserGroup Naming
	
	bLoginPBRE		: R_TRIG;
	bLogoutPBRE		: R_TRIG;
	bUM_CreatePBRE	: R_TRIG;
	bUM_EditPBRE	: R_TRIG;
	bUM_DeletePBRE	: R_TRIG;
	bUM_DisablePBRE	: R_TRIG;
	iCase: INT;
	sMessageDelayTimer: TON;
	iFL: INT;
	bDuplicatedLoginName: BOOL;
	bDuplicatedOperatorId: BOOL;
	bUserDBMax: BOOL;
	iUserDBVacantField: INT;
	bUM_ConfirmPBRE: R_TRIG;
	bUM_ReturnPBRE: R_TRIG;
	btest: BOOL;
	bUM_EnablePBRE: R_TRIG;
	tLoginActivatedTimer: TON;
	tLogoutActivatedTimer: TON;
	ntGetTime: NT_GetTime;
	t1s: TON;
END_VAR
	
VAR PERSISTENT
	dsHmiUserReg 			: DS_HmiUserReg;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[t1s(IN:=NOT t1s.Q , PT:=T#0.5S , Q=> , ET=> );

// Get System Time
ntGetTime(	NETID:='' , START:=t1s.Q , TMOUT:= T#5S, TIMESTR=> tsLocalSystemTimeStruct);

tsLocalSystemTimeStruct.wYear;
tsLocalSystemTimeStruct.wMonth;
tsLocalSystemTimeStruct.wDay;
tsLocalSystemTimeStruct.wHour;
tsLocalSystemTimeStruct.wMinute;
tsLocalSystemTimeStruct.wSecond;
tsLocalSystemTimeStruct.wMilliseconds;
tsLocalSystemTimeStruct.wDayOfWeek;


// Default UserGroup - Must Matched with HMI UserGroup Naming
ARsUserGroup[0]			:= 	STRING_TO_WSTRING('GUEST');
ARsUserGroup[1]			:= 	STRING_TO_WSTRING('OPERATOR');
ARsUserGroup[2]			:=	STRING_TO_WSTRING('TECHNICIAN');
ARsUserGroup[3]			:=	STRING_TO_WSTRING('ENGINEER');
ARsUserGroup[4]			:=	STRING_TO_WSTRING('ADMIN');
ARsUserGroup[5]			:=	STRING_TO_WSTRING('JKS');
//ARsUserGroup[6]			:=	STRING_TO_WSTRING('');
//ARsUserGroup[7]			:=	STRING_TO_WSTRING('');	

// Default SuperAdmin
dsHmiUserReg.ARbUserStatus[dsHmiUserReg.iQtyUserReg+1]			:= 	TRUE		;
dsHmiUserReg.AReActorType[dsHmiUserReg.iQtyUserReg+1]			:= 	0			; //Human
dsHmiUserReg.ARiUserGroupID[dsHmiUserReg.iQtyUserReg+1]			:= 	5			; //Highest level - JKS Admin
dsHmiUserReg.ARsFirstName[dsHmiUserReg.iQtyUserReg+1]			:= 	'Machine'	;
dsHmiUserReg.ARsLastName[dsHmiUserReg.iQtyUserReg+1]			:= 	'Maker'		;
dsHmiUserReg.ARsLoginName[dsHmiUserReg.iQtyUserReg+1]			:= 	'SoftwareManager'	;
dsHmiUserReg.ARsOperatorIdentifier[dsHmiUserReg.iQtyUserReg+1]	:= 	'Software Manager'	;
dsHmiUserReg.ARsPw[dsHmiUserReg.iQtyUserReg+1]					:= 	'7189'	;
dsHmiUserReg.ARwsUserGroupName[dsHmiUserReg.iQtyUserReg+1]		:= 	ARsUserGroup[5]	;


// R_TRIG
bLoginPBRE		(CLK:=bLoginPB , 		Q=> );
bLogoutPBRE		(CLK:=bLogoutPB , 		Q=> );

bUM_CreatePBRE	(CLK:=bUM_CreatePB , 	Q=> );
bUM_EditPBRE	(CLK:=bUM_EditPB , 		Q=> );
bUM_DeletePBRE	(CLK:=bUM_DeletePB , 	Q=> );
bUM_EnablePBRE	(CLK:=bUM_EnablePB , 	Q=> );
bUM_DisablePBRE	(CLK:=bUM_DisablePB , 	Q=> );
bUM_ConfirmPBRE	(CLK:=bUM_ConfirmPB , 	Q=> );
bUM_ReturnPBRE	(CLK:=bUM_ReturnPB , 	Q=> );


// Delay off
tLoginActivatedTimer(IN:=dsHmiUserStatus_Login.bActivatedFlag , PT:=T#1S , Q=> , ET=> );
IF tLoginActivatedTimer.Q THEN
	dsHmiUserStatus_Login.bActivatedFlag := FALSE;
END_IF

tLogoutActivatedTimer(IN:=dsHmiUserStatus_Logout.bActivatedFlag , PT:=T#1S , Q=> , ET=> );
IF tLogoutActivatedTimer.Q THEN
	dsHmiUserStatus_Logout.bActivatedFlag := FALSE;
END_IF



// Action 

	IF iCase = 0 THEN
		
		IF 	bLoginPBRE.Q AND iLoginNameId > 0 AND iLoginNameId <= dsHmiUserReg.iQtyUserReg +1 AND sPasswordField <> '' THEN
			iCase := 11; // Login 
			
		ELSIF bLogoutPBRE.Q THEN
			iCase := 21; //	Logout
			
		ELSIF bUM_CreatePBRE.Q AND dsHmiUserStatus_Login.sUserGroupId >= 4 THEN
			iCase := 31; //	User Management -> New User Creation
			
		ELSIF bUM_EditPBRE.Q AND dsHmiUserStatus_Login.sUserGroupId >= 4 AND iUM_SelectedLoginNameId > 0 AND iUM_SelectedLoginNameId <= dsHmiUserReg.iQtyUserReg +1 THEN
			iCase := 41; //	User Management -> Edit User
			
		ELSIF bUM_DeletePBRE.Q AND dsHmiUserStatus_Login.sUserGroupId >= 4 AND iUM_SelectedLoginNameId > 0 AND iUM_SelectedLoginNameId <= dsHmiUserReg.iQtyUserReg +1 
		AND dsHmiUserReg.ARsLoginName[iUM_SelectedLoginNameId] <> dsHmiUserStatus_Login.sLoginName THEN
			iCase := 51; //	User Management -> Delete User
			
		ELSIF (bUM_EnablePBRE.Q OR bUM_DisablePBRE.Q)AND dsHmiUserStatus_Login.sUserGroupId >= 4 AND iUM_SelectedLoginNameId > 0 AND iUM_SelectedLoginNameId <= dsHmiUserReg.iQtyUserReg +1 THEN
			iCase := 61; //	User Management -> Enable or Temporary Disable selected User

		ELSIF (bUM_DeletePBRE.Q) AND dsHmiUserReg.ARsLoginName[iUM_SelectedLoginNameId] = dsHmiUserStatus_Login.sLoginName THEN
				sMessage := 'Signed in user cannot be delete, please sign in another administrator user before deletion';
					
		ELSIF (bUM_CreatePBRE.Q OR bUM_EditPBRE.Q OR bUM_DeletePBRE.Q OR bUM_EnablePBRE.Q OR bUM_DisablePBRE.Q ) AND dsHmiUserStatus_Login.sUserGroupId <= 4  THEN
				sMessage := 'You do not have permission to perform the task, please contact administrator.';
					
		ELSIF (bUM_EditPBRE.Q OR bUM_DeletePBRE.Q OR bUM_EnablePBRE.Q OR bUM_DisablePBRE.Q ) AND iUM_SelectedLoginNameId = 0 THEN
				sMessage := 'Please select user';
					
		ELSIF (bUM_EditPBRE.Q OR bUM_DeletePBRE.Q OR bUM_EnablePBRE.Q OR bUM_DisablePBRE.Q ) AND iUM_SelectedLoginNameId > dsHmiUserReg.iQtyUserReg +1 THEN
				sMessage := 'Selected user out of user database range';
					
		ELSIF bLoginPBRE.Q AND (iLoginNameId = 0 OR sPasswordField = '' ) THEN
				sMessage := 'Please select user and enter password to login';
					
		ELSIF bLoginPBRE.Q AND iLoginNameId > dsHmiUserReg.iQtyUserReg +1 THEN
				sMessage := 'Selected login user out of user database range';
					
		END_IF
		
	END_IF



CASE iCase OF
	
	0: ;// Idling;

	8: // Clear new user registration field and return

		sUM_CurrentPassword 			:= '' ;
		sUM_NewPassword 				:= '' ;
		sUM_ConfirmPassword 			:= '' ; 
		sUM_NewUserLoginName 			:= '' ; 
		sUM_NewUserGroupId				:= 0 ;	
		sUM_NewUserOperatorIdentifier	:= '' ;
		sUM_NewUserActorType			:= 0 ; 
		sUM_NewUserLastName				:= '' ;
		sUM_NewUserFirstName			:= '' ;
		
		iUM_SelectedLoginNameId			:= 0;
		
		iCase := 0; // Return		
	
	9: // Clear Active Field and return
	
		dsHmiUserStatus_Logout := dsHmiUserStatus_Active;
		IF dsHmiUserStatus_Logout.sLoginName <> '' THEN
			dsHmiUserStatus_Logout.bActivatedFlag 	:= TRUE;
			dsHmiUserStatus_Logout.tsDateTime 		:= tsLocalSystemTimeStruct;
		END_IF

		sPasswordField 			:= 		'';
		dsHmiUserStatus_Active 	:= 		dsHmiUserStatus_Empty;
		wsActiveUserGroupName 	:= 		TO_WSTRING('');

		iCase := 0; //Return



	11: // Login 
	
		IF dsHmiUserReg.ARsPw[iLoginNameId] = sPasswordField AND dsHmiUserReg.ARbUserStatus[iLoginNameId] THEN
				
				// if detected with existing login user and it relogin with another user, this section will action
				IF dsHmiUserStatus_Active.sLoginName <> '' THEN
					dsHmiUserStatus_Logout := dsHmiUserStatus_Active;
					dsHmiUserStatus_Logout.bActivatedFlag := TRUE;
					dsHmiUserStatus_Logout.tsDateTime := tsLocalSystemTimeStruct;
				END_IF


				sPasswordField 				:= 		'';
				
				dsHmiUserStatus_Active.bActivatedFlag		:= 		TRUE;
				dsHmiUserStatus_Active.sOperatorIdentifier 	:= 		dsHmiUserReg.ARsOperatorIdentifier[iLoginNameId];	// Celestica Requirement
				dsHmiUserStatus_Active.eActorType			:=		dsHmiUserReg.AReActorType[iLoginNameId];			// Celestica Requirement
				dsHmiUserStatus_Active.sULastName			:=		dsHmiUserReg.ARsLastName[iLoginNameId];
				dsHmiUserStatus_Active.sFirstName			:=		dsHmiUserReg.ARsFirstName[iLoginNameId];
				
				dsHmiUserStatus_Active.sLoginName			:=		dsHmiUserReg.ARsLoginName[iLoginNameId];			// Same as Username
	
				dsHmiUserStatus_Active.sUserGroupId			:=		dsHmiUserReg.ARiUserGroupID[iLoginNameId];			// Define in HMI TF1800

				dsHmiUserStatus_Active.tsDateTime			:=		tsLocalSystemTimeStruct;
				wsActiveUserGroupName 						:= 		dsHmiUserReg.ARwsUserGroupName[iLoginNameId];
				
	
				dsHmiUserStatus_Login := dsHmiUserStatus_Active;
				dsHmiUserStatus_Login.bActivatedFlag := TRUE;
				dsHmiUserStatus_Login.tsDateTime := tsLocalSystemTimeStruct;
				
				sMessage := 'Welcome!';
				sMessage := concat(sMessage,' ');
				sMessage := concat(sMessage,dsHmiUserStatus_Active.sFirstName);
				sMessage := concat(sMessage,' ');
				sMessage := concat(sMessage,dsHmiUserStatus_Active.sULastName);
				sMessage := concat(sMessage,' (');
				sMessage := concat(sMessage,dsHmiUserStatus_Active.sLoginName);
				sMessage := concat(sMessage,')');
		
				iCase := 0;	//Return
						
		ELSIF NOT dsHmiUserReg.ARbUserStatus[iLoginNameId] THEN
				sMessage := 'Selected user has been DISABLE, please contact administrator.';
				iCase := 9; // Clear Active Field and return
			
		
		ELSE
				sMessage := 'Invalid password';
				iCase := 9; // Clear Active Field and return
		
		END_IF
				
		
	
	21: // Logout 
		
				sMessage := 'You have been successfully logged out.';	
				iCase := 9; // Clear Active Field and return 
		
	
	31: // User Management -> New User Creation 
	
		IF sUM_NewPassword 					<> '' 
		AND sUM_ConfirmPassword 			<> '' 
	//	AND sUM_NewUserLoginName 			<> '' 
		AND sUM_NewUserGroupId				<> 0 AND sUM_NewUserGroupId <= 4	// Doesnt need for another JKS User (5)
	//	AND sUM_NewUserOperatorIdentifier	<> ''
	//	AND sUM_NewUserActorType			<= 2 AND sUM_NewUserActorType >= 0
		AND sUM_NewUserLastName				<> ''
		AND sUM_NewUserFirstName			<> ''

		THEN
			
			// Check Duplicated Login Name
				bDuplicatedLoginName := FALSE;
				
				FOR iFL := 1 TO dsHmiUserReg.iQtyUserReg DO
					IF sUM_NewUserLoginName = dsHmiUserReg.ARsLoginName[iFL] THEN
						bDuplicatedLoginName := TRUE;
						EXIT;
					END_IF
				;
				END_FOR

			// Check Duplicated Operator Identifier
				bDuplicatedOperatorId := FALSE;
				
				FOR iFL := 1 TO dsHmiUserReg.iQtyUserReg DO
					IF sUM_NewUserOperatorIdentifier = dsHmiUserReg.ARsOperatorIdentifier[iFL] THEN
						bDuplicatedOperatorId := TRUE;
						EXIT;
					END_IF
				;
				END_FOR

			// Check User Database Limit
				bUserDBMax := TRUE;
				iUserDBVacantField := 0;
				
				FOR iFL := 1 TO dsHmiUserReg.iQtyUserReg DO
					IF dsHmiUserReg.ARsLoginName[iFL] = '' THEN
						iUserDBVacantField := iFL;
						bUserDBMax := FALSE;
						EXIT;
					END_IF
				;
				END_FOR


			IF sUM_NewPassword <> sUM_ConfirmPassword THEN
				
				sMessage := 'Your new password and confirmation password mismatched';	
				sUM_ConfirmPassword := '';
				iCase := 0;

			ELSIF bDuplicatedLoginName THEN
							
				sMessage := 'Login Name already exists, please try with another one ';	
				sUM_NewUserLoginName 	:= '';
				sUM_NewPassword			:= '';
				sUM_ConfirmPassword 	:= '';
				iCase 					:= 0;

//			ELSIF bDuplicatedOperatorId THEN
							
//				sMessage := 'Operator Indentifier already exists, please try with another one ';	
//				sUM_NewUserOperatorIdentifier 	:= '';
//				sUM_NewPassword					:= '';
//				sUM_ConfirmPassword 			:= '';
//				iCase 							:= 0;
				
			ELSIF bUserDBMax THEN
							
				sMessage 	:= 'User Registration Limit Reached. Please delete at least one user to proceed the registration again ';	
				iCase 		:= 8; // Clear new user registration field and return
				
			ELSE
				
				
							
			//	dsHmiUserReg.ARsOperatorIdentifier[iUserDBVacantField] 	:= sUM_NewUserOperatorIdentifier;	// Celestica Requirement
			//	dsHmiUserReg.AReActorType[iUserDBVacantField]			:= sUM_NewUserActorType;			// Celestica Requirement
				dsHmiUserReg.ARsLastName[iUserDBVacantField]			:= sUM_NewUserLastName;
				dsHmiUserReg.ARsFirstName[iUserDBVacantField]			:= sUM_NewUserFirstName;
				dsHmiUserReg.ARsLoginName[iUserDBVacantField]			:= sUM_NewUserLoginName;			// Same as Username
				dsHmiUserReg.ARbUserStatus[iUserDBVacantField]			:= TRUE;							// 0 = Deactivated/Disable, 1 = Active User
				
				dsHmiUserReg.ARiUserGroupID[iUserDBVacantField]			:= sUM_NewUserGroupId;				// Define in HMI TF1800
				dsHmiUserReg.ARwsUserGroupName[iUserDBVacantField]		:= ARsUserGroup[sUM_NewUserGroupId];// Define in HMI TF1800
				dsHmiUserReg.ARsPw[iUserDBVacantField]					:= sUM_NewPassword;		

				sMessage := 'User is added successfully. Please go to Login page to proceed';	
				iCase := 8; // Clear new user registration field and return
					
			END_IF
			
		
		ELSE
			
			sMessage := 'Your registration is Incomplete';	
			iCase := 0; //RETURN
		END_IF
	
		
	41: // User Management -> Edit User 

		sUM_NewUserOperatorIdentifier := dsHmiUserReg.ARsOperatorIdentifier[iUM_SelectedLoginNameId];	// Celestica Requirement
		sUM_NewUserActorType := dsHmiUserReg.AReActorType[iUM_SelectedLoginNameId];						// Celestica Requirement
		sUM_NewUserLastName := dsHmiUserReg.ARsLastName[iUM_SelectedLoginNameId];
		sUM_NewUserFirstName := dsHmiUserReg.ARsFirstName[iUM_SelectedLoginNameId];
		sUM_NewUserLoginName := dsHmiUserReg.ARsLoginName[iUM_SelectedLoginNameId];						// Same as Username
		
		sUM_NewUserGroupId := dsHmiUserReg.ARiUserGroupID[iUM_SelectedLoginNameId];						// Define in HMI TF1800

		sUM_CurrentPassword := '';//dsHmiUserReg.ARsPw[iUM_SelectedLoginNameId];		
		sUM_NewPassword 	:= '';//dsHmiUserReg.ARsPw[iUM_SelectedLoginNameId];		
		sUM_ConfirmPassword := '';//dsHmiUserReg.ARsPw[iUM_SelectedLoginNameId];		
		
		iCase := 42;

	42: // User Management -> Edit User => Waiting Confirmation
	
		sMessage := 'Are you sure you want to MODIFY selected user?';	
	
		IF bUM_ConfirmPBRE.Q THEN
					
			IF sUM_CurrentPassword <> dsHmiUserReg.ARsPw[iUM_SelectedLoginNameId] THEN
					
				sMessage := 'Invalid Current Password';
				iUM_SelectedLoginNameId := 0;	
				iCase := 8; // Clear and return
			
			ELSIF sUM_NewPassword <> sUM_ConfirmPassword THEN	
			
					
				sMessage := 'Your new password and confirmation password mismatched';
				iUM_SelectedLoginNameId := 0;	
				iCase := 8; // Clear and return
			
			ELSE
				dsHmiUserReg.ARsOperatorIdentifier[iUM_SelectedLoginNameId] 	:= sUM_NewUserOperatorIdentifier;	// Celestica Requirement
				dsHmiUserReg.AReActorType[iUM_SelectedLoginNameId]				:= sUM_NewUserActorType;			// Celestica Requirement
				dsHmiUserReg.ARsLastName[iUM_SelectedLoginNameId]				:= sUM_NewUserLastName;
				dsHmiUserReg.ARsFirstName[iUM_SelectedLoginNameId]				:= sUM_NewUserFirstName;
				dsHmiUserReg.ARsLoginName[iUM_SelectedLoginNameId]				:= sUM_NewUserLoginName;			// Same as Username
				//dsHmiUserReg.ARbUserStatus[iUM_SelectedLoginNameId]			:= TRUE;							// 0 = Deactivated/Disable, 1 = Active User
				
				dsHmiUserReg.ARiUserGroupID[iUM_SelectedLoginNameId]			:= sUM_NewUserGroupId;				// Define in HMI TF1800
				dsHmiUserReg.ARwsUserGroupName[iUM_SelectedLoginNameId]			:= ARsUserGroup[sUM_NewUserGroupId];// Define in HMI TF1800
				
				IF sUM_NewPassword <> '' THEN
					dsHmiUserReg.ARsPw[iUM_SelectedLoginNameId]						:= sUM_NewPassword;		// It will only update the password if the New and Confirm password filled accurately.
				END_IF
				
				sMessage := 'User Info is Updated successfully. Please go to Login page to proceed';	
				iUM_SelectedLoginNameId := 0;	
				iCase := 8; // Clear new user registration field and return
	
			END_IF
				
		ELSIF bUM_ReturnPBRE.Q THEN

			sMessage := 'Returned';	
			iUM_SelectedLoginNameId := 0;	
			iCase := 8; // Clear and return

		END_IF		
	51: // User Management -> Delete User 
	
		sMessage := 'Are you sure you want to DELETE selected user?';	
	
		IF bUM_ConfirmPBRE.Q THEN 
					
			dsHmiUserReg.ARsOperatorIdentifier[iUM_SelectedLoginNameId]		:= '';				// Celestica Requirement
			dsHmiUserReg.AReActorType[iUM_SelectedLoginNameId]				:= 0;				// Celestica Requirement
			dsHmiUserReg.ARsLastName[iUM_SelectedLoginNameId]				:= '';
			dsHmiUserReg.ARsFirstName[iUM_SelectedLoginNameId]				:= '';
			dsHmiUserReg.ARsLoginName[iUM_SelectedLoginNameId]				:= '';				// Same as Username
			dsHmiUserReg.ARbUserStatus[iUM_SelectedLoginNameId]				:= FALSE;			// 0 = Deactivated/Disable, 1 = Active User
			
			dsHmiUserReg.ARiUserGroupID[iUM_SelectedLoginNameId]			:= 0;				// Define in HMI TF1800
			dsHmiUserReg.ARwsUserGroupName[iUM_SelectedLoginNameId]			:= TO_WSTRING('');	// Define in HMI TF1800
			dsHmiUserReg.ARsPw[iUM_SelectedLoginNameId]						:= '';					

			sMessage := 'Selected user has been DELETED.';
			iUM_SelectedLoginNameId := 0;	
			iCase := 0;
		
		ELSIF bUM_ReturnPBRE.Q THEN

			sMessage := 'Returned';	
			iUM_SelectedLoginNameId := 0;	
			iCase := 0;

		END_IF

	61: // User Management -> Temporary Disable selected User 
	
		IF bUM_EnablePBRE.Q THEN
			 sMessage := 'Are you sure you want to ENABLE selected user?';	

		ELSIF bUM_DisablePBRE.Q THEN
			 sMessage := 'Are you sure you want to DISABLE selected user?';	
		END_IF
	

	
		IF bUM_ConfirmPBRE.Q AND sMessage = 'Are you sure you want to ENABLE selected user?' THEN 
					
			dsHmiUserReg.ARbUserStatus[iUM_SelectedLoginNameId]				:= TRUE;			// 0 = Deactivated/Disable, 1 = Active User			
			sMessage := 'Selected user has been ENABLE.';	
			iUM_SelectedLoginNameId := 0;	
			iCase := 0;
		
		ELSIF bUM_ConfirmPBRE.Q AND sMessage = 'Are you sure you want to DISABLE selected user?' THEN 			
					
			dsHmiUserReg.ARbUserStatus[iUM_SelectedLoginNameId]				:= FALSE;			// 0 = Deactivated/Disable, 1 = Active User			
			sMessage := 'Selected user has been DISABLE.';	
			iUM_SelectedLoginNameId := 0;	
			iCase := 0;
		
		ELSIF bUM_ReturnPBRE.Q THEN

			sMessage := 'Returned';	
			iUM_SelectedLoginNameId := 0;	
			iCase := 0;

		END_IF

END_CASE



// Clear Message after x period of time
	
	sMessageDelayTimer(IN:=sMessage <> '' AND iCase <> 42 AND iCase <> 51 AND iCase <> 61 , PT:=T#3S , Q=> , ET=> );
	IF sMessageDelayTimer.Q THEN
		sMessage := '';
	END_IF
]]></ST>
    </Implementation>
    <LineIds Name="FB3_HmiTF1800_UserlevelManagement">
      <LineId Id="1014" Count="0" />
      <LineId Id="1016" Count="0" />
      <LineId Id="993" Count="0" />
      <LineId Id="995" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="1007" Count="6" />
      <LineId Id="1006" Count="0" />
      <LineId Id="992" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="173" Count="5" />
      <LineId Id="172" Count="0" />
      <LineId Id="1126" Count="1" />
      <LineId Id="1130" Count="1" />
      <LineId Id="1140" Count="6" />
      <LineId Id="1129" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="284" Count="1" />
      <LineId Id="287" Count="0" />
      <LineId Id="290" Count="2" />
      <LineId Id="930" Count="1" />
      <LineId Id="696" Count="1" />
      <LineId Id="958" Count="1" />
      <LineId Id="330" Count="0" />
      <LineId Id="963" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="965" Count="1" />
      <LineId Id="968" Count="5" />
      <LineId Id="960" Count="0" />
      <LineId Id="331" Count="1" />
      <LineId Id="356" Count="0" />
      <LineId Id="335" Count="4" />
      <LineId Id="484" Count="0" />
      <LineId Id="341" Count="8" />
      <LineId Id="1106" Count="0" />
      <LineId Id="350" Count="3" />
      <LineId Id="1100" Count="0" />
      <LineId Id="1107" Count="5" />
      <LineId Id="1103" Count="2" />
      <LineId Id="1117" Count="8" />
      <LineId Id="357" Count="1" />
      <LineId Id="355" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="288" Count="1" />
      <LineId Id="299" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="678" Count="2" />
      <LineId Id="820" Count="0" />
      <LineId Id="681" Count="7" />
      <LineId Id="691" Count="1" />
      <LineId Id="689" Count="0" />
      <LineId Id="657" Count="2" />
      <LineId Id="674" Count="0" />
      <LineId Id="975" Count="1" />
      <LineId Id="978" Count="0" />
      <LineId Id="1002" Count="0" />
      <LineId Id="977" Count="0" />
      <LineId Id="979" Count="0" />
      <LineId Id="1095" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="671" Count="2" />
      <LineId Id="660" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="654" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="986" Count="0" />
      <LineId Id="988" Count="0" />
      <LineId Id="980" Count="0" />
      <LineId Id="982" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="983" Count="2" />
      <LineId Id="418" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="1113" Count="0" />
      <LineId Id="423" Count="3" />
      <LineId Id="433" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="429" Count="1" />
      <LineId Id="1004" Count="0" />
      <LineId Id="1003" Count="0" />
      <LineId Id="432" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="957" Count="0" />
      <LineId Id="989" Count="0" />
      <LineId Id="956" Count="0" />
      <LineId Id="436" Count="1" />
      <LineId Id="441" Count="2" />
      <LineId Id="445" Count="2" />
      <LineId Id="435" Count="0" />
      <LineId Id="676" Count="0" />
      <LineId Id="675" Count="0" />
      <LineId Id="950" Count="0" />
      <LineId Id="953" Count="1" />
      <LineId Id="951" Count="1" />
      <LineId Id="394" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="653" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="460" Count="1" />
      <LineId Id="677" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="505" Count="1" />
      <LineId Id="523" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="514" Count="3" />
      <LineId Id="510" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="583" Count="8" />
      <LineId Id="582" Count="0" />
      <LineId Id="595" Count="10" />
      <LineId Id="627" Count="2" />
      <LineId Id="648" Count="0" />
      <LineId Id="630" Count="1" />
      <LineId Id="646" Count="0" />
      <LineId Id="632" Count="4" />
      <LineId Id="592" Count="1" />
      <LineId Id="547" Count="1" />
      <LineId Id="550" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="552" Count="0" />
      <LineId Id="565" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="575" Count="2" />
      <LineId Id="579" Count="0" />
      <LineId Id="607" Count="7" />
      <LineId Id="594" Count="0" />
      <LineId Id="638" Count="2" />
      <LineId Id="644" Count="1" />
      <LineId Id="560" Count="0" />
      <LineId Id="625" Count="1" />
      <LineId Id="615" Count="9" />
      <LineId Id="556" Count="0" />
      <LineId Id="651" Count="1" />
      <LineId Id="650" Count="0" />
      <LineId Id="649" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="546" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="760" Count="4" />
      <LineId Id="766" Count="1" />
      <LineId Id="821" Count="0" />
      <LineId Id="770" Count="4" />
      <LineId Id="758" Count="1" />
      <LineId Id="799" Count="0" />
      <LineId Id="775" Count="3" />
      <LineId Id="813" Count="1" />
      <LineId Id="819" Count="0" />
      <LineId Id="817" Count="1" />
      <LineId Id="822" Count="0" />
      <LineId Id="918" Count="6" />
      <LineId Id="835" Count="0" />
      <LineId Id="800" Count="9" />
      <LineId Id="926" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="811" Count="0" />
      <LineId Id="829" Count="0" />
      <LineId Id="812" Count="0" />
      <LineId Id="830" Count="1" />
      <LineId Id="793" Count="2" />
      <LineId Id="832" Count="0" />
      <LineId Id="796" Count="2" />
      <LineId Id="752" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="751" Count="0" />
      <LineId Id="727" Count="15" />
      <LineId Id="753" Count="0" />
      <LineId Id="743" Count="3" />
      <LineId Id="833" Count="0" />
      <LineId Id="754" Count="0" />
      <LineId Id="747" Count="3" />
      <LineId Id="380" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="933" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="934" Count="0" />
      <LineId Id="938" Count="0" />
      <LineId Id="936" Count="1" />
      <LineId Id="935" Count="0" />
      <LineId Id="948" Count="0" />
      <LineId Id="940" Count="6" />
      <LineId Id="707" Count="0" />
      <LineId Id="710" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="755" Count="0" />
      <LineId Id="726" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="834" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="722" Count="1" />
      <LineId Id="303" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="408" Count="1" />
      <LineId Id="398" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="407" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>